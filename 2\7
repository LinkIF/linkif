=== Часть 2\7===

async function J() {
      let e = (
        await f("#kopaem .process td#metrodig", "https://www.moswar.ru/metro/")
      )?.getAttribute("timer");
      if (e) {
        console.log(
          `[\u26CF\uFE0F Metro] Metro work cooldown. Retry in ${v(+e)}.`
        ),
          showAlert(
            "\u0423\u0436\u0435 \u0432 \u043C\u0435\u0442\u0440\u043E \u26CF\uFE0F",
            `<div><img src="/@/images/pers/npc1_thumb.png" align="right" title="\u041A\u0440\u044B\u0441\u043E\u043C\u0430\u0445\u0430" alt="\u041A\u0440\u044B\u0441\u043E\u043C\u0430\u0445\u0430"><br><span>\u0421\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0439 \u0441\u043F\u0443\u0441\u043A \u0447\u0435\u0440\u0435\u0437 ${v(+e)}.</span></div>`
          ),
          setTimeout(async () => await J(), +e * 1e3);
        return;
      }
      showAlert(
        "\u041A\u043E\u043F\u0430\u0435\u043C \u0432\u0435\u0442\u043A\u0443 \u043C\u0435\u0442\u0440\u043E \u26CF\uFE0F",
        '<div><img src="/@/images/pers/npc1_thumb.png" align="right" title="\u041A\u0440\u044B\u0441\u043E\u043C\u0430\u0445\u0430" alt="\u041A\u0440\u044B\u0441\u043E\u043C\u0430\u0445\u0430"><br><span>\u0421\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0439 \u0441\u043F\u0443\u0441\u043A \u0447\u0435\u0440\u0435\u0437 10:00.</span></div>'
      ),
        await Ye(),
        await te("dig"),
        await te("work"),
        setTimeout(
          async () => {
            await J();
          },
          10.1 * 60 * 1e3
        );
    }
    async function N({
      minLvl = +player.level - 1,
      maxLvl = +player.level - 1,
      criteria = "level",
      performChecks = !0,
      werewolf = 0,
    } = {}) {
      if (
        performChecks &&
        (await oe(N, 0, { minLvl, maxLvl, criteria, performChecks, werewolf }))
      )
        return;
      let attackPayload = {
          level: `werewolf=${Number(werewolf)}&nowerewolf=${+!werewolf}&minlevel=${minLvl}&maxlevel=${maxLvl}&__ajax=1&return_url=%2Falley%2F`,
          type: `type=weak&=${Number(werewolf)}=${Number(werewolf)}&nowerewolf=${+!werewolf}&__ajax=1&return_url=%2Falley%2F`,
        },
        res = await fetch(`https://www.moswar.ru/alley/search/${criteria}/`, {
          headers: {
            "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
            "sec-ch-ua": '"Chromium";v="131", "Not_A Brand";v="24"',
            "sec-fetch-mode": "cors",
            "x-requested-with": "XMLHttpRequest",
          },
          referrer: "https://www.moswar.ru/alley/search/level/",
          referrerPolicy: "strict-origin-when-cross-origin",
          body: attackPayload[criteria],
          method: "POST",
          mode: "cors",
          credentials: "include",
        }),
        data = await res.text(),
        htmlStr = await JSON.parse(data).content,
        doc = L(htmlStr);
      console.log(criteria, attackPayload[criteria]);
      let opponentName = doc.querySelector(".fighter2").innerText,
        opponentLevel = +doc
          .querySelector(".fighter2 .level")
          .innerText.slice(1, -1),
        onclick = doc
          .querySelector("#content > div > div.button.button-fight > a")
          .getAttribute("onclick");
      if (
        criteria === "type" &&
        (opponentLevel < minLvl || opponentLevel > maxLvl)
      ) {
        console.log(
          "Opponent:",
          opponentName,
          opponentLevel,
          `
Level is too high or too low (${minLvl}-${maxLvl}). Retrying...`
        ),
          await N({ minLvl, maxLvl, criteria, performChecks, werewolf });
        return;
      }
      console.log("\u{1F94A} Found enemy, attacking:", opponentName),
        eval(onclick.split(";")[0]);
    }
    async function St(t = 25) {
      for (let e = 0; e < t; e++)
        await nt(),
          await N({
            minLvl: +player.level,
            maxLvl: +player.level,
            criteria: "level",
            performChecks: !1,
          }),
          await I(0.1);
    }
    async function nt() {
      await fetch("https://www.moswar.ru/alley/", {
        headers: {
          accept: "application/json, text/javascript, */*; q=0.01",
          "accept-language": "en-GB,en;q=0.9",
          "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
          "sec-fetch-dest": "empty",
          "sec-fetch-mode": "cors",
          "sec-fetch-site": "same-origin",
          "x-requested-with": "XMLHttpRequest",
        },
        referrer: "https://www.moswar.ru/alley/",
        referrerPolicy: "strict-origin-when-cross-origin",
        body: "action=rest_cooldown&code=snikers&ajax=true",
        method: "POST",
        mode: "cors",
        credentials: "include",
      });
    }
    async function _t(t, e = !1) {
      let o = await (
        await fetch("https://www.moswar.ru/alley/", {
          headers: {
            accept: "*/*",
            "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
            "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "same-origin",
            "x-requested-with": "XMLHttpRequest",
          },
          referrer: "https://www.moswar.ru/alley/search/type/",
          referrerPolicy: "strict-origin-when-cross-origin",
          body: `action=attack&player=${t}&werewolf=${e ? 1 : 0}&useitems=0&__referrer=%2Falley%2Fsearch%2Ftype%2F&return_url=%2Falley%2Fsearch%2Ftype%2F`,
          method: "POST",
          mode: "cors",
          credentials: "include",
        })
      ).json();
      return o.return_url && o.return_url.includes("alley/fight/")
        ? "https://www.moswar.ru" + o.return_url
        : null;
    }
    async function E() {
      try {
        let e = (
          await f(
            "#alley-search-myself span.timer",
            "https://www.moswar.ru/alley/"
          )
        ).getAttribute("timer");
        return +e < 0 ? !1 : +e;
      } catch {
        return console.log("\u{1F6A7} Could not find cooldown"), !1;
      }
    }
    async function kt() {
      await j(),
        AngryAjax.reload(),
        await fetch("https://www.moswar.ru/fight/", {
          headers: {
            accept: "*/*",
            "accept-language": "en-GB,en;q=0.9",
            "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "same-origin",
            "x-requested-with": "XMLHttpRequest",
          },
          referrer: "https://www.moswar.ru/fight/",
          referrerPolicy: "strict-origin-when-cross-origin",
          body: "action=join+fight&fight=0&price=money&type=chaotic&__ajax=1&return_url=%2Falley%2F",
          method: "POST",
          mode: "cors",
          credentials: "include",
        }),
        await fetch("https://www.moswar.ru/fight/", {
          headers: {
            accept: "*/*",
            "accept-language": "en-GB,en;q=0.9",
            "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "same-origin",
            "x-requested-with": "XMLHttpRequest",
          },
          referrer: "https://www.moswar.ru/fight/",
          referrerPolicy: "strict-origin-when-cross-origin",
          body: "action=join+fight&fight=0&price=huntbadge&type=chaotic&__ajax=1&return_url=%2Falley%2F",
          method: "POST",
          mode: "cors",
          credentials: "include",
        }),
        await fetch("https://www.moswar.ru/fight/", {
          headers: {
            accept: "*/*",
            "accept-language": "en-GB,en;q=0.9",
            "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "same-origin",
            "x-requested-with": "XMLHttpRequest",
          },
          referrer: "https://www.moswar.ru/fight/",
          referrerPolicy: "strict-origin-when-cross-origin",
          body: "action=join+fight&fight=0&price=zub&type=chaotic&__ajax=1&return_url=%2Falley%2F",
          method: "POST",
          mode: "cors",
          credentials: "include",
        }),
        AngryAjax.reload();
    }
    async function At() {
      function t() {
        let n = new Date(),
          o = { timeZone: "Europe/Moscow", hour12: !1 },
          r = new Intl.DateTimeFormat("en-US", {
            ...o,
            hour: "2-digit",
            minute: "2-digit",
          }).format(n),
          [a, s] = r.split(":").map(Number),
          c = a * 60 + s;
        return c >= 690 && c <= 1411;
      }
      if (!t()) return;
      console.log(
        "[\u{1F93A}] Chaotic fight mode. Waiting for the next scheduled fight..."
      );
      async function e() {
        let n = new Date(),
          o = n.getMinutes(),
          r = [14, 29, 44, 59].find((p) => o < p),
          a = r === void 0 ? n.getHours() + 1 : n.getHours(),
          s = r !== void 0 ? r : 14,
          c = new Date(n.getFullYear(), n.getMonth(), n.getDate(), a, s, 30),
          l = c.getTime() - n.getTime();
        showAlert(
          "\u0412\u0441\u0451 \u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u043E \u0441\u0434\u0435\u043B\u0430\u043B!",
          `\u0417\u0430\u043F\u0438\u0441\u044C \u043D\u0430 \u0445\u0430\u043E\u0442 \u0432 ${c.toUTCString()} (\u0447\u0435\u0440\u0435\u0437 ${v(Math.floor(l / 1e3))})`
        ),
          l > 0
            ? setTimeout(async () => {
                await kt(), setTimeout(async () => await e(), 60 * 1e3);
              }, l)
            : (await kt(), setTimeout(async () => await e(), 60 * 1e3));
      }
      e();
    }
    async function Ze(t = 10) {
      if (AngryAjax.getCurrentUrl().includes("fight"))
        for (let e = 0; e < t; e++) {
          let n = document.querySelector("#fight-actions > div.waiting");
          if (n) {
            console.log(n);
            return;
          }
          console.log(
            "\u041F\u0440\u043E\u043F\u0443\u0441\u043A\u0430\u044E \u0445\u043E\u0434..."
          ),
            groupFightMakeStep(),
            AngryAjax.reload(),
            await I(0.5);
        }
    }
    async function ot() {
      let t = [11, 15, 19, 23],
        e = xt(),
        n = e.getHours(),
        o = t.find((c) => c > n) || t[0];
      o === t[0] && n > t[t.length - 1] && (o = t[0]);
      let r = xt();
      o <= n && r.setDate(r.getDate() + 1), r.setHours(o - 1, 59, 57, 0);
      let s = r.getTime() - e.getTime();
      showAlert(
        "\u0412\u0441\u0451 \u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u043E \u0441\u0434\u0435\u043B\u0430\u043B!",
        `<img src="/@/images/pers/man131_thumb.png"> <span>\u0417\u0430\u043F\u0438\u0441\u044B\u0432\u0430\u044E\u0441\u044C \u043D\u0430 \u0418\u0418 \u0447\u0435\u0440\u0435\u0437 ${v(s / 1e3)} (\u0432 ${r.toLocaleTimeString("ru-RU")})!</span>`
      ),
        typeof window.nodeLog == "function" &&
          nodeLog(
            player?.nickname || "Unknown Player",
            `\u0418\u0418 \u0437\u0430\u043F\u0438\u0441\u044C \u0432 ${r.toLocaleTimeString("ru-RU")}`
          ),
        setTimeout(async () => {
          await fetch("https://www.moswar.ru/phone/call/joinPhoneBoss/", {
            headers: {
              accept: "application/json, text/javascript, */*; q=0.01",
              "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
              "content-type":
                "application/x-www-form-urlencoded; charset=UTF-8",
              "sec-ch-ua": '"Not A(Brand";v="8", "Chromium";v="132"',
              "sec-ch-ua-mobile": "?0",
              "sec-ch-ua-platform": '"macOS"',
              "sec-fetch-dest": "empty",
              "sec-fetch-mode": "cors",
              "sec-fetch-site": "same-origin",
              "x-requested-with": "XMLHttpRequest",
            },
            body: "ajax=1&slot=phone3&type=phoneboss3",
            method: "POST",
            mode: "cors",
            credentials: "include",
          });
        }, s),
        setTimeout(
          async () => {
            await ot();
          },
          s + 20 * 1e3
        );
    }
    async function rt() {
      await fetch("https://www.moswar.ru/camp/gypsy/", {
        headers: {
          accept: "application/json, text/javascript, */*; q=0.01",
          "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
          "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
          "x-requested-with": "XMLHttpRequest",
        },
        referrer: "https://www.moswar.ru/camp/gypsy/",
        body: "action=gypsyStart&gametype=0",
        method: "POST",
        mode: "cors",
        credentials: "include",
      }),
        await fetch("https://www.moswar.ru/camp/gypsy/", {
          headers: {
            accept: "application/json, text/javascript, */*; q=0.01",
            "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
            "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
            "x-requested-with": "XMLHttpRequest",
          },
          referrer: "https://www.moswar.ru/camp/gypsy/",
          body: "action=gypsyAuto",
          method: "POST",
          mode: "cors",
        }),
        AngryAjax.goToUrl("/camp/gypsy/");
    }
    function Qe(t, e) {
      return (
        (t = t.toLowerCase()),
        Object.values(e).filter((n) => n.name.toLowerCase().includes(t))
      );
    }
    function tn(t) {
      return Object.values(t).map((e) => ({
        expiryDate: e[0],
        count: Number(e[1]),
        itemId: e[3],
      }));
    }
    async function en(t) {
      await fetch("https://www.moswar.ru/phone/call/tradeItemView/", {
        headers: {
          accept: "application/json, text/javascript, */*; q=0.01",
          "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
          "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
          "sec-ch-ua": '"Not:A-Brand";v="24", "Chromium";v="134"',
          "sec-ch-ua-mobile": "?0",
          "sec-ch-ua-platform": '"macOS"',
          "sec-fetch-dest": "empty",
          "sec-fetch-mode": "cors",
          "sec-fetch-site": "same-origin",
          "x-requested-with": "XMLHttpRequest",
        },
        body: `ajax=1&item=${t}&slot=phone3`,
        method: "POST",
        mode: "cors",
        credentials: "include",
      });
      let n = await (
          await fetch("https://www.moswar.ru/phone/call/giveItem/", {
            headers: {
              accept: "application/json, text/javascript, */*; q=0.01",
              "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
              "content-type":
                "application/x-www-form-urlencoded; charset=UTF-8",
              "sec-fetch-mode": "cors",
              "sec-fetch-site": "same-origin",
              "x-requested-with": "XMLHttpRequest",
            },
            referrer: "https://www.moswar.ru/phone/call",
            referrerPolicy: "strict-origin-when-cross-origin",
            body: "ajax=1&slot=phone3",
            method: "POST",
            mode: "cors",
            credentials: "include",
          })
        ).text(),
        { prize: o } = JSON.parse(n);
      return console.log(o), $(`<div class="prize-container">${o}</div>`);
    }
    async function jt() {
      let t = await W(0),
        e = Qe("\u0441\u0438\u0440\u0438", t)[0],
        n = tn(e.stackList);
      console.log(n);
      for (let o of n) for (let r = 0; r < o.count; r++) await en(o.itemId);
    }
    async function ae() {
      let n = (
        await (
          await fetch("https://www.moswar.ru/casino/blackjack/", {
            method: "POST",
            headers: {
              accept: "application/json, text/javascript, */*; q=0.01",
              "content-type":
                "application/x-www-form-urlencoded; charset=UTF-8",
              "x-requested-with": "XMLHttpRequest",
            },
            body: "action=new&bet=10",
            credentials: "include",
          })
        ).json()
      ).newRightHand.reduce((o, r) => o + r[2], 0);
      for (; n < 17; ) {
        await new Promise((a) => setTimeout(a, 500));
        let r = await (
          await fetch("https://www.moswar.ru/casino/blackjack/", {
            method: "POST",
            headers: {
              accept: "application/json, text/javascript, */*; q=0.01",
              "content-type":
                "application/x-www-form-urlencoded; charset=UTF-8",
              "x-requested-with": "XMLHttpRequest",
            },
            body: "action=more",
            credentials: "include",
          })
        ).json();
        if (!r.card || ((n += r.card[0][2]), n > 21)) break;
      }
      await new Promise((o) => setTimeout(o, 500)),
        await fetch("https://www.moswar.ru/casino/blackjack/", {
          method: "POST",
          headers: {
            accept: "application/json, text/javascript, */*; q=0.01",
            "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
            "x-requested-with": "XMLHttpRequest",
          },
          body: "action=stop",
          credentials: "include",
        });
    }
    function k({
      text: t,
      onClick: e = () => {},
      title: n,
      className: o,
      disableAfterClick: r = !0,
    }) {
      let a = A(
        `<button type="button" class="${o}-btn button"><span style="float: none;" class="f"><i class="rl"></i><i class="bl"></i><i class="brc"></i><div class="c">${t}</div></span></button>`
      );
      return (
        (a.setText = function (s) {
          $(a).find(".c").text(s);
        }),
        a.addEventListener("click", async (s) => {
          if (!a.classList.contains("disabled")) {
            a.classList.add("disabled");
            try {
              await e(s);
            } catch (c) {
              console.error(e.toString(), c);
            }
            r || a.classList.remove("disabled");
          }
        }),
        n && (a.title = n),
        a
      );
    }
    function Ft({ toggleText: t, className: e, items: n, isOpen: o = !0 }) {
      let r = $(`<div class="dropdown ${e}"></div>`).css({
        display: "flex",
        gap: "8px",
        justifyContent: "center",
        flexWrap: "wrap",
        alignItems: "center",
      });
      o || r.hide(),
        n.forEach((c) => {
          r.append(c);
        });
      let a = k({
          text: t,
          onClick: (c) => {
            let l = c.currentTarget;
            r.toggle("fast"), l.classList.remove("disabled");
          },
        }),
        s = $("<div>")
          .css({
            display: "flex",
            gap: "8px",
            justifyContent: "center",
            flexDirection: "column",
            alignItems: "center",
          })
          .append(a, r);
      return (
        (s.append = (c) => {
          r.append(c);
        }),
        s
      );
    }
    function at({
      label: t,
      action: e,
      className: n,
      min: o = 1,
      max: r = 500,
    }) {
      let a = $(`<div class="${n} btn-input-field"></div>`).css({
          display: "flex",
          flexDirection: "column",
          alignItems: "center",
          gap: "4px",
          padding: "4px",
        }),
        s = $("<input>", {
          type: "number",
          min: o,
          max: r,
          value: o,
          class: "input-field",
        })
          .css({ width: "60px", textAlign: "center" })
          .on("input", function () {
            let l = parseInt($(this).val(), 10);
            l || $(this).val(o),
              l > r && $(this).val(r),
              l < o && $(this).val(o),
              c.setText(`${t} x${$(this).val()}`);
          }),
        c = k({
          text: `${t} x${o}`,
          className: n,
          onClick: async () => {
            let l = parseInt(s.val(), 10);
            if (isNaN(l) || l < o || l > r) return;
            c.classList.add("disabled");
            let p = Date.now();
            for (let u = 0; u < l; u++) await e();
            let g = Date.now() - p;
            c.classList.remove("disabled"),
              showAlert(
                "\u0413\u043E\u0442\u043E\u0432\u043E",
                `\u041F\u043E\u0432\u0442\u043E\u0440\u0438\u043B \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 ${l} \u0440\u0430\u0437 \u0437\u0430 ${v(Math.floor(g / 1e3))}.`
              );
          },
        });
      return a.append(s, $(c)), a;
    }
    var Y = [
        160, 198, 64, 48, 165, 46, 167, 211, 197, 56, 50, 122, 215, 47, 110,
        115, 220, 196, 133, 87, 92,
      ],
      ce = [155, 97, 93, 190, 121, 158],
      H = [
        192, 158, 190, 121, 93, 97, 135, 155, 182, 178, 195, 219, 59, 216, 212,
        183, 173, 159, 156, 149, 146, 134, 119, 111, 95, 88, 84, 78, 74, 69, 68,
        65, 58, 55, 54, 52, 51, 49, 44, 38, 36, 35,
      ],
      qt = [141, 19, 85];
    async function le(t = "979786") {
      await Mt(t),
        fetch("https://www.moswar.ru/automobile/bringup/", {
          headers: {
            accept: "*/*",
            "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
            "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "same-origin",
            "x-requested-with": "XMLHttpRequest",
          },
          referrer: "https://www.moswar.ru/automobile/bringup/",
          referrerPolicy: "strict-origin-when-cross-origin",
          body: `car=${t}&__ajax=1&return_url=%2Farbat%2F`,
          method: "POST",
          mode: "cors",
          credentials: "include",
        });
    }
    async function B(t = "979786") {
      if (
        !(
          new Intl.DateTimeFormat("en-US", {
            weekday: "long",
            timeZone: "Europe/Moscow",
          }).format(new Date()) === "Monday"
        )
      ) {
        showAlert(
          "\u{1F695}",
          "\u041D\u0435 \u043F\u043E\u043D\u0435\u0434\u0435\u043B\u044C\u043D\u0438\u043A."
        );
        return;
      }
      let n = await f("#cooldown", "https://www.moswar.ru/arbat/");
      if (n)
        try {
          let a = await n.getAttribute("timer");
          console.log(`[\u{1F695}] Retrying in ${v(a)} minutes.`),
            setTimeout(() => B(t), +a * 1e3);
          return;
        } catch {
          console.log("[\u{1F695}] Cooldown timer not found.");
        }
      await le(t), await I(3);
      let r = await (
        await f("#cooldown", "https://www.moswar.ru/arbat/")
      ).getAttribute("timer");
      console.log(`[\u{1F695}] \u2705 Done. Retrying in ${v(r)} minutes.`),
        setTimeout(() => B(t), +r * 1e3);
    }
    async function Pt(t = "1095154") {
      await fetch(`https://www.moswar.ru/automobile/buypetrol/${t}/`, {
        headers: {
          accept: "*/*",
          "accept-language": "en-GB,en;q=0.9",
          "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
          "sec-ch-ua": '"Chromium";v="131", "Not_A Brand";v="24"',
          "sec-ch-ua-mobile": "?0",
          "sec-ch-ua-platform": '"macOS"',
          "sec-fetch-dest": "empty",
          "sec-fetch-mode": "cors",
          "sec-fetch-site": "same-origin",
          "x-requested-with": "XMLHttpRequest",
        },
        referrer: `https://www.moswar.ru/automobile/buypetrol/${t}/`,
        referrerPolicy: "strict-origin-when-cross-origin",
        body: `__ajax=1&return_url=%2Fautomobile%2Fcar%2F${t}`,
        method: "POST",
        mode: "cors",
        credentials: "include",
      });
    }
    async function nn() {
      try {
        let e = (
          await f("#home-garage > div > div > a", "https://www.moswar.ru/home/")
        ).map((n) => n.getAttribute("href").split("/").splice(-2, 1)[0]);
        await Promise.all(e.map((n) => Pt(n)));
      } catch {
        console.log("Could not fuel all cars");
      }
    }

      

               
 // =================================================== Функции управления гаражом ===========================================//


async function Mt(t = "979786") {
    let e = await f(
        ".fuel .neft",
        `https://www.moswar.ru/automobile/car/${t}/`
    );
    try {
        +e.innerText.split(":")[1].split("/")[0] === 0 &&
            (console.log("[Check Car Tank] Car tank is empty!"), await Pt(t));
    } catch {
        console.log("[Check Car Tank] Car tank not found");
    }
}

function initializeButtons() {
    // Создаем основной контейнер
    const container = document.createElement('div');
    container.id = 'mw-panel';
    container.style.cssText = `
        background: #fff8e1;
        border: 2px solid #ffcc80;
        padding: 10px 15px;
        border-radius: 12px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        width: fit-content;
        margin: 10px;
        font-family: Arial, sans-serif;
    `;

    // === Горизонтальный блок кнопок ===
    const topBar = document.createElement("div");
    topBar.style.cssText = `
        display: flex;
        flex-wrap: wrap;
        gap: 70px;
        justify-content: center;
    `;

    function makeButton(text, title, className, handler) {
        const b = document.createElement("button");
        b.textContent = text;
        b.title = title;
        b.className = `mw-btn ${className}`;
        b.onclick = handler;
        return b;
    }

    // Добавляем кнопки
    topBar.append(
        makeButton("🟢 Отправить", "Отправить выбранный транспорт", "mw-btn-green", async () => {
            const selected = [...document.querySelectorAll('.cars-trip-choose input[type="checkbox"]:checked:not([disabled])')];
            for (let cb of selected) {
                try {
                    const li = cb.closest("li");
                    if (!li) continue;
                    const carInput = li.querySelector('input[name="car"]');
                    const dirInput = li.querySelector('input[name="direction"]:checked');
                    if (!carInput || !dirInput) continue;
                    const carId = carInput.value;
                    const rideId = dirInput.value;

                    await Mt(carId);
                    await fetch("/automobile/ride/", {
                        method: "POST",
                        credentials: "include",
                        headers: { "Content-Type": "application/x-www-form-urlencoded" },
                        body: `car=${carId}&direction=${rideId}&__ajax=1`
                    });

                    cb.checked = false;
                    updateStatus(`📤 Отправлена машина ${carId} ➜ ${rideId}`);
                } catch (err) {
                    console.warn("❌ Ошибка при отправке:", err);
                    updateStatus("❌ Ошибка при отправке", true);
                }
            }
        }),

        makeButton("⛽ Заправить", "Заправить все машины", "mw-btn-blue", async (event) => {
            const btn = event?.target;
            const originalText = btn.textContent;
            btn.textContent = "⏳ Заправка...";
            btn.disabled = true;

            await refuelAllTransport();

            btn.textContent = originalText;
            btn.disabled = false;
        }),

        makeButton("💾", "Сохранить текущий комплект", "", () => saveSetModal()),
        makeButton("📤", "Выбрать комплект для отправки", "", () => createSetSelectionModal()),
        makeButton("🧹", "Сбросить все сохранённые комплекты", "", () => {
            localStorage.removeItem("moswar_saved_sets");
            localStorage.removeItem("moswar_active_set");
            updateSetIndicator();
            drawSetSummary();
            updateStatus("🧹 Все комплекты удалены");
        })
    );

    container.append(topBar);

    // === Список комплектов ===
    const summary = document.createElement("div");
    summary.className = "set-summary";
    summary.style.cssText = `
        font-size: 13px;
        line-height: 1.5;
        margin-top: 4px;
    `;
    container.append(summary);

    // Очищаем и добавляем панель
    $("#content > div > div.block-bordered").html("").append(container);

    // Стилизация транспорта
    const carsList = $("#content > div > div.cars-trip-choose.clearfix > div ul li");
    
    // Сортировка и стилизация машин
    sortAndStyleCars(carsList);

    // CSS для списка машин
    $("#content > div > div.cars-trip-choose.clearfix > div ul").css({
        display: "grid",
        "grid-template-columns": "repeat(auto-fit, minmax(200px, 1fr))",
        gap: "10px"
    });

    // CSS для контейнера
    $(".cars-trip-choose.clearfix").css({
        position: "relative",
        left: "35%",
        transform: "translateX(-50%)",
        width: "80vw",
        margin: "auto",
        "z-index": 9998
    });

    // CSS для аккордеона
    $(".cars-trip-accordion").css({
        background: "rgba(255, 255, 255, 0.2)",
        "backdrop-filter": "blur(10px)",
        "-webkit-backdrop-filter": "blur(10px)",
        "border-radius": "10px",
        border: "1px solid rgba(255, 255, 255, 0.3)",
        padding: "20px",
        width: "100%",
        "box-shadow": "0 4px 10px rgba(0, 0, 0, 0.1)"
    });

    // Инициализация индикаторов
    drawSetSummary();
    updateSetIndicator();
}

// Вспомогательные функции
function drawSetSummary() {
    const container = document.querySelector(".set-summary");
    if (!container) return;

    const sets = JSON.parse(localStorage.getItem("moswar_saved_sets") || "{}");
    container.innerHTML = "";

    for (let i = 1; i <= 4; i++) {
        const count = sets[i]?.length || 0;
        if (count > 0) {
            const slot = document.createElement("span");
            slot.textContent = `Слот ${i} (${count})`;
            slot.style.margin = "30px";
            container.appendChild(slot);
        }
    }
}

function applySavedSet(slot) {
    const sets = JSON.parse(localStorage.getItem("moswar_saved_sets") || "{}");
    const selected = sets[slot];
    if (selected && selected.length) {
        document.querySelectorAll('input.dynamic-checkbox:checked').forEach(cb => cb.checked = false);
        selected.forEach(s => {
            const carInput = document.querySelector(`input[name="car"][value="${s.carId}"]`);
            if (carInput) {
                const li = carInput.closest("li");
                const dirInput = li.querySelector(`input[name="direction"][value="${s.rideId}"]`);
                if (dirInput) {
                    const checkbox = li.querySelector('input.dynamic-checkbox');
                    if (checkbox) checkbox.checked = true;
                }
            }
        });
        console.log(`✅ Применен комплект из слота ${slot}`);
    }
}

function updateSetIndicator() {
    const slot = localStorage.getItem("moswar_active_set") || "–";
    const label = document.querySelector(".set-indicator-label");
    if (label) {
        const sets = JSON.parse(localStorage.getItem("moswar_saved_sets") || "{}");
        const count = sets[slot]?.length || 0;
        label.textContent = slot !== "–" ? `Комплект: ${slot} (${count})` : "Комплект: –";
    }
}

function sortAndStyleCars(carsList) {
    function processCarStyles(cars) {
        cars.each((_, car) => {
            $(car).find("table.title").remove();
            $(car).find("table.ride-info").remove();
            $(car).css({ minHeight: "auto", height: "auto" });
            $(car).find(".picture .timeout").each((_, timeout) => {
            $(timeout).css({ height: "auto" });
                $(timeout).contents().not("span.ride-cooldown").remove();
            });
        });
    }

    processCarStyles(carsList);
    carsList.css("box-shadow", "0px 1px 9px 2px rgba(24, 22, 38, 0.5)");
}
