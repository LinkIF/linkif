=== Чать 1/7
// ==UserScript==
// @name           К работе подготовлен
// @author         barifan
// @namespace      Linkif
// @version
// @description    Реализовано: логи, блок кнопок (дизайн)
// @include        *moswar.ru*
// @include        https://*.moswar.mail.ru*
// @match          *://*.moswar.ru/*
// @icon         https://www.google.com/s2/favicons?sz=64&domain=moswar.ru
// @grant          none
// ==/UserScript==

var __esModule = (async function () {
    // Добавляем глобальный обработчик ошибок
    window.addEventListener('error', function(event) {
        console.error(`[${new Date().toISOString()}] [LinkIF] Global error:`, event.error);
    });

    window.addEventListener('unhandledrejection', function(event) {
        console.error(`[${new Date().toISOString()}] [LinkIF] Unhandled rejection:`, event.reason);
    });

    // === СТИЛИ ДЛЯ ПАНЕЛИ ===
    const style = document.createElement('style');
    style.textContent = `
        #mw-panel {
            background: #fff8e1;
            border: 2px solid #ffcc80;
            padding: 10px 15px;
            border-radius: 12px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            width: fit-content;
            margin: 10px;
            font-family: Arial, sans-serif;
        }
        .mw-slot {
            display: inline-block;
            margin: 4px;
            padding: 6px 10px;
            border: 1px solid #ffb74d;
            border-radius: 6px;
            background: #ffe0b2;
            font-weight: bold;
            position: relative;
        }
        .mw-slot .reset-btn {
            position: absolute;
            top: -6px;
            right: -6px;
            background: #ef5350;
            color: white;
            border: none;
            border-radius: 50%;
            width: 18px;
            height: 18px;
            font-size: 12px;
            cursor: pointer;
        }
        .mw-divider {
            display: inline-block;
            width: 10px;
            height: 32px;
        }
        .mw-btn {
            background: linear-gradient(to bottom, #ffe082, #ffca28);
            border: 2px solid #f57f17;
            border-radius: 8px;
            padding: 6px 12px;
            font-weight: bold;
            margin: 5px;
            cursor: pointer;
        }
        .mw-status-line {
            margin-top: 10px;
            font-style: italic;
            color: #555;
        }
        .mw-select {
            margin-left: 5px;
            padding: 4px 8px;
            border-radius: 5px;
            border: 1px solid #ccc;
        }
    `;
    document.head.appendChild(style);

    // Вспомогательные функции
    function resetSlot(index) {
        const raw = localStorage.getItem("moswar_saved_sets");
        if (!raw) return;

        const allSets = JSON.parse(raw);
        if (!Array.isArray(allSets) || !allSets[index]) return;

        allSets[index] = null;

        localStorage.setItem("moswar_saved_sets", JSON.stringify(allSets));

        drawSetSummary();
        updateSetIndicator();
        updateStatus(`Слот ${index + 1} очищен`);
    }

    function updateStatus(text) {
        const el = document.getElementById("mw-status");
        if (el) el.textContent = text;
    }

    var utils_ = (() => {
        var ft = Object.defineProperty;
        var Be = Object.getOwnPropertyDescriptor;
        var Oe = Object.getOwnPropertyNames;
        var Ne = Object.prototype.hasOwnProperty;
        var Re = (t, e) => {
            for (var n in e) ft(t, n, { get: e[n], enumerable: !0 });
        },
        Ee = (t, e, n, o) => {
            if ((e && typeof e == "object") || typeof e == "function")
                for (let r of Oe(e))
                    !Ne.call(t, r) &&
                    r !== n &&
                    ft(t, r, {
                        get: () => e[r],
                        enumerable: !(o = Be(e, r)) || o.enumerable,
                    });
            return t;
        };
        var He = (t) => Ee(ft({}, "__esModule", { value: !0 }), t);
        var Gn = {};
        Re(Gn, {
      BANNED_CARS: () => qt,
      DOPINGS_DATA_ST: () => tt,
      EXCEPTION_CARS: () => Y,
      EXCEPTION_PLANES_AND_BOATS_RIDES_IDS: () => ce,
      HEADERS: () => Vt,
      LEGACY_initGroupFightLogs: () => Fe,
      PLANES_AND_BOATS_RIDES_IDS: () => H,
      aIsGroupFight: () => Ct,
      attackByCriteria: () => N,
      attackOrReschedule: () => oe,
      attackPlayer: () => _t,
      attackRandom: () => sn,
      autoPilot: () => Hn,
      boostClan: () => Ot,
      buyCasinoTokens: () => Rn,
      carBringup: () => le,
      carBringupMode: () => B,
      chaoticFightMode: () => At,
      checkBronikPieces: () => gt,
      checkBubble: () => ne,
      checkCarTank: () => Mt,
      checkInjury: () => Tt,
      checkVictimWorthy: () => re,
      convertPlayerUrlToId: () => ht,
      createButton: () => k,
      createPopover: () => D,
      delay: () => I,
      drawTimers: () => Kt,
      dungeonSpeedUp: () => zt,
      eatSilly: () => bt,
      eatSnickers: () => nt,
      farm: () => St,
      farmEnemies: () => et,
      farmVictims: () => vt,
      fightMode: () => $t,
      fillCarTank: () => Pt,
      filterLogs: () => Ge,
      formatNumber: () => Q,
      formatTime: () => v,
      fuelAllCars: () => nn,
      gatherStats: () => Xe,
      getAlleyCooldown: () => E,
      getElementsOnThePage: () => f,
      getPlayerId: () => K,
      getTodayScore: () => ze,
      handleSmurfFight: () => R,
      handleUI: () => mt,
      heal: () => Ve,
      init: () => Dn,
      joinChaoticFight: () => kt,
      joinProt: () => Bt,
      kubovichSpeedUp: () => Dt,
      makeTurn: () => Ze,
      mapDataStToDataId: () => wt,
      metroWorkMode: () => J,
      neftLeninSkipFight: () => Gt,
      parseHtml: () => L,
      patrolMode: () => P,
      playGypsy: () => rt,
      player: () => Le,
      protMode: () => an,
      redrawMain: () => dt,
      renderCandyCountdown: () => ut,
      renderNavbar: () => Ht,
      renderPanel: () => Et,
      restoreHP: () => j,
      scrapeStat: () => Jt,
      sendCars: () => de,
      sendMessage: () => Qt,
      sendPlanesAndBoats: () => pe,
      sendRide: () => Lt,
      shouldAttack: () => Je,
      showAlert: () => Xt,
      signUpForSiri: () => ot,
      smurfInit: () => Me,
      sortGarage: () => initializeButtons,
      startPatrol: () => ee,
      strToHtml: () => A,
      takeDailyDose: () => Ke,
      timeToMs: () => De,
      trackAndAttackRat: () => ie,
      trackRatMode: () => C,
      tradeAllSiri: () => jt,
      undressItem: () => En,
      useDopings: () => yt,
      useItem: () => W,
      waitForCooldown: () => it,
      watchTv: () => We,
      workMode: () => U,
      zodiacMode: () => O,
    });
    var V = window.$;
    function De(t) {
      let e = t.split(":").map(Number),
        n = 0,
        o = 0,
        r = 0;
      return (
        e.length === 3
          ? ((n = e[0]), (o = e[1]), (r = e[2]))
          : e.length === 2
            ? ((o = e[0]), (r = e[1]))
            : e.length === 1 && (r = e[0]),
        (n * 3600 + o * 60 + r) * 1e3
      );
    }
    function v(t) {
      let e = Math.floor(t / 3600),
        n = Math.floor((t % 3600) / 60),
        o = t % 60;
      return [
        e > 0 ? String(e).padStart(2, "0") : null,
        String(n).padStart(2, "0"),
        String(o).padStart(2, "0"),
      ]
        .filter(Boolean)
        .join(":");
    }
    function Q(t) {
      return (
        (t = `${t}`.split(",").join("")),
        Math.abs(t) >= 1e9
          ? Math.floor((t / 1e9) * 10) / 10 + "B"
          : Math.abs(t) >= 1e6
            ? Math.floor((t / 1e6) * 10) / 10 + "M"
            : Math.abs(t) >= 1e3
              ? Math.floor((t / 1e3) * 10) / 10 + "K"
              : t.toString()
      );
    }
    function I(t = 1) {
      return new Promise((e) => setTimeout(e, t * 1e3));
    }
    async function f(t, e) {
      let o = await (await fetch(e)).text(),
        r = V(L(o));
      if (!r || !r.length) return;
      let a = r.find(t);
      return a.length ? (a.length === 1 ? a[0] : a.toArray()) : null;
    }
    function L(t) {
      let e = new DOMParser(),
        n = t.replace(/\\&quot;/g, '"').replace(/\\"/g, '"');
      return e.parseFromString(n, "text/html");
    }
    function ht(t) {
      let e = t.match(/\player\/(\d+)\//);
      return e ? e[1] : null;
    }
    function K(t) {
      try {
        let e = t.querySelector(".fighter2 .user a").href;
        return ht(e);
      } catch {
        console.log("\u{1F6A7} Could not find player id");
      }
    }
    function Ge(t = window.document) {
      return [...t.querySelectorAll("tr")]
        .filter(
          (r) =>
            r.querySelector("td.actions div.c")?.innerText ===
            "\u0412 \u0441\u043F\u0438\u0441\u043E\u043A \u0436\u0435\u0440\u0442\u0432"
        )
        .map((r) => {
          let a = +r
              .querySelector(".text .tugriki")
              .innerText.split(",")
              .join(""),
            s = r.querySelector(".user a").href;
          if (a > 3e5) return s;
        })
        .filter((r) => r)
        .map((r) => ht(r));
    }
    async function ze() {
      return +(await f(".my .value b", "https://www.moswar.ru/rating/wins/"))
        .innerText;
    }
    function A(t) {
      let e = document.createElement("div");
      return (e.innerHTML = t.trim()), e.firstChild;
    }
    async function Jt(t) {
      let e = `#stats-accordion > dd:nth-child(2) > ul > li:nth-child(${t}) > div.label > span`;
      V(`${e}`).trigger("mouseenter"),
        await new Promise((w) => setTimeout(w, 250));
      let o = `#tooltip${t + 1}`,
        r = `${o} > h2`,
        a = V(r)[0]?.innerText;
      if (!a) return console.error(`Key not found for tooltip ${o}`), null;
      let s = `${o} > div > span:nth-child(1)`,
        c = V(s)[0]?.innerText || "",
        l = parseInt(c.split(":")[1].trim(), 10),
        p = `${o} > div > span:nth-child(3)`,
        d = V(p)[0]?.innerText || "",
        g = parseInt(d.split("+")[1].trim(), 10);
      return {
        [a]: {
          Персонаж: l || 0,
          ["\u0421\u0443\u043F\u0435\u0440" + a.toLowerCase()]: g || 0,
          Сумма: (l || 0) + (g || 0),
        },
      };
    }
    async function Xe() {
      let t = {
        Дата: new Date().toLocaleDateString("ru-RU").replace(/\./g, "/"),
      };
      for (let e = 1; e <= 7; e++) {
        let n = await Jt(e);
        n && Object.assign(t, n);
      }
      return t;
    }
    var tt = {
      heal: 51,
      pyani: 52,
      tvorog: 53,
      vitaminsHealth: 3397,
      pillsHealth: 3840,
      deMinerale: 3841,
      bomjori: 3381,
      kukuruza: [9904, 9905, 9906, 9907, 9908, 9909],
      pryaniki: [7375, 7376, 7377, 7378, 7379, 7380],
      pasta: [3551, 3552, 3553, 3554, 3555, 3556],
      caramels: [1209, 1210, 1211, 1212, 1213, 1214],
      cocktails: [2656, 2657, 2658, 2659, 2660, 2661],
      glupaya: 2872,
    };
    async function wt(t) {
      let e = Array.isArray(t) ? t : [t];
      return await Promise.all(
        e.map(async (o) =>
          (
            await f(`img[data-st="${o}"]`, "https://www.moswar.ru/player/")
          )?.getAttribute("data-id")
        )
      );
    }
    async function yt(t) {
      let e = await wt(t);
      await Promise.all(e.map((n) => W(n)));
    }
    async function Ve() {
      await yt(tt.heal);
    }
    async function W(t = "2474213164") {
      let n = await (
          await fetch(`https://www.moswar.ru/player/json/use/${t}/`)
        ).text(),
        { inventory: o } = JSON.parse(n);
      return o;
    }
    async function Ke(t = !0) {
      let {
          bomjori: e,
          kukuruza: n,
          pryaniki: o,
          pasta: r,
          caramels: a,
          pillsHealth: s,
          vitaminsHealth: c,
          glupaya: l,
        } = tt,
        p = [...n, ...a, ...o, ...r, s, c, e, t ? l : null];
      await Promise.all(p.map((d) => yt(d)));
    }
    async function j() {
      await fetch("https://www.moswar.ru/player/checkhp/", {
        headers: {
          accept: "*/*",
          "accept-language": "en-GB,en;q=0.9",
          "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
          "sec-fetch-dest": "empty",
          "sec-fetch-mode": "cors",
          "sec-fetch-site": "same-origin",
          "x-requested-with": "XMLHttpRequest",
        },
        referrerPolicy: "strict-origin-when-cross-origin",
        body: "action=restorehp",
        method: "POST",
        mode: "cors",
        credentials: "include",
      });
    }
    async function bt() {
      let t = await wt(tt.glupaya);
      await W(t);
    }
    async function Yt(t, e = "victim") {
      fetch("https://www.moswar.ru/phone/contacts/add/", {
        headers: {
          accept: "*/*",
          "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
          "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
          "sec-ch-ua": '"Chromium";v="131", "Not_A Brand";v="24"',
          "sec-ch-ua-mobile": "?0",
          "sec-ch-ua-platform": '"macOS"',
          "sec-fetch-dest": "empty",
          "sec-fetch-mode": "cors",
          "sec-fetch-site": "same-origin",
          "x-requested-with": "XMLHttpRequest",
        },
        referrer: "https://www.moswar.ru/phone/contacts/add/",
        referrerPolicy: "strict-origin-when-cross-origin",
        body: `name=+${t}&clan=&info=&type=${e}&__ajax=1&return_url=%2Fphone%2Fcontacts%2Fadd%2F7178077%2F`,
        method: "POST",
        mode: "cors",
        credentials: "include",
      });
    }
    async function Zt(t, e) {
      console.log(`\u{1F525} Removing ${t} from contacts.`),
        await fetch("https://www.moswar.ru/phone/contacts/", {
          headers: {
            accept: "*/*",
            "accept-language": "en-GB,en;q=0.9",
            "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
            "sec-ch-ua": '"Chromium";v="131", "Not_A Brand";v="24"',
            "sec-ch-ua-mobile": "?0",
            "sec-ch-ua-platform": '"macOS"',
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "same-origin",
            "x-requested-with": "XMLHttpRequest",
          },
          referrer: "https://www.moswar.ru/phone/contacts/victims/",
          referrerPolicy: "strict-origin-when-cross-origin",
          body: `action=delete&id=${e}&nickname=+${t}&type=contact&__referrer=%2Fphone%2Fcontacts%2Fvictims%2F&return_url=%2Fphone%2Fcontacts%2Fvictims%2F`,
          method: "POST",
          mode: "cors",
          credentials: "include",
        });
    }
    async function Qt(t, e) {
      try {
        let n = (
          await f('input[name="post_key"]', "https://www.moswar.ru/phone/")
        ).value;
        await fetch("https://www.moswar.ru/phone/messages/send/", {
          headers: {
            accept: "*/*",
            "accept-language": "en-GB,en;q=0.9",
            "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
            "sec-ch-ua": '"Chromium";v="131", "Not_A Brand";v="24"',
            "sec-ch-ua-mobile": "?0",
            "sec-ch-ua-platform": '"macOS"',
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "same-origin",
            "x-requested-with": "XMLHttpRequest",
          },
          referrer: "https://www.moswar.ru/phone/messages/send/",
          referrerPolicy: "strict-origin-when-cross-origin",
          body: `maxTextSize=10000&post_key=${n}&name=${t}&text=${e}&__ajax=1&return_url=%2Fphone%2F`,
          method: "POST",
          mode: "cors",
          credentials: "include",
        }),
          showAlert("Phone \u2705", `Message sent to ${t}`);
      } catch {
        showAlert("Phone \u274C", "Could not send message"),
          console.log("Could not send message");
      }
    }
    function xt() {
      return new Date(
        new Date().toLocaleString("en-US", { timeZone: "Europe/Moscow" })
      );
    }
    async function U(t = 1) {
      async function e() {
        (await f(
          "#workForm > div.time > span.error",
          "https://www.moswar.ru/shaurburgers/"
        )) ||
          (await fetch("https://www.moswar.ru/shaurburgers/", {
            headers: {
              accept: "*/*",
              "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
              "content-type":
                "application/x-www-form-urlencoded; charset=UTF-8",
              "sec-fetch-dest": "empty",
              "sec-fetch-mode": "cors",
              "sec-fetch-site": "same-origin",
              "x-requested-with": "XMLHttpRequest",
            },
            referrer: "https://www.moswar.ru/shaurburgers/",
            referrerPolicy: "strict-origin-when-cross-origin",
            body: `action=work&time=${t}&__ajax=1&return_url=%2Fshaurburgers%2F`,
            method: "POST",
            mode: "cors",
            credentials: "include",
          }));
      }
      await e(t), setTimeout(async () => U(t), 60.05 * 60 * 1e3);
    }
    async function P(t = 10) {
      try {
        let e = $(await f("form#patrolForm", "https://www.moswar.ru/alley/"));
        if (
          e.find(".timeleft").text() ===
          "\u041D\u0430 \u0441\u0435\u0433\u043E\u0434\u043D\u044F \u0412\u044B \u0443\u0436\u0435 \u0438\u0441\u0442\u0440\u0430\u0442\u0438\u043B\u0438 \u0432\u0441\u0435 \u0432\u0440\u0435\u043C\u044F \u043F\u0430\u0442\u0440\u0443\u043B\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F."
        ) {
          let r = Math.floor(
            (new Date(
              new Date().toLocaleString("en-US", { timeZone: "Europe/Moscow" })
            ).setHours(24, 1, 0, 0) -
              new Date()) /
              1e3
          );
          return (
            console.log(`\u23F0 Patrol is over. Retrying in ${v(r)}`),
            setTimeout(async () => await P(t), r * 1e3)
          );
        }
        let o = e?.find("td.value")?.attr("timer");
        if (o) {
          console.log(
            `\u23F1\uFE0F\u2744\uFE0F Patrol cooldown. Retry in ${v(o)}.`
          ),
            setTimeout(async () => await P(t), (+o + 3) * 1e3);
          return;
        }
        console.log(`[\u{1F694}] Patrol Mode (${t} minutes).`),
          await ee(t),
          setTimeout(() => P(t), t * 60 * 1e3 + 3e3);
      } catch (e) {
        console.log(
          `Could not start patrol mode
`,
          e
        );
      }
    }
    async function ee(t = 10, e = 1) {
      await fetch("https://www.moswar.ru/alley/", {
        headers: {
          accept: "*/*",
          "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
          "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
          "sec-fetch-dest": "empty",
          "sec-fetch-mode": "cors",
          "sec-fetch-site": "same-origin",
          "x-requested-with": "XMLHttpRequest",
        },
        referrer: "https://www.moswar.ru/alley/",
        referrerPolicy: "strict-origin-when-cross-origin",
        body: `action=patrol&region=${e}&time=${t}&__ajax=1&return_url=%2Falley%2F`,
        method: "POST",
        mode: "cors",
        credentials: "include",
      }),
        await fetch("https://www.moswar.ru/desert/"),
        await fetch("https://www.moswar.ru/desert/rob/");
    }
    async function We() {
      await fetch("https://www.moswar.ru/alley/", {
        headers: {
          accept: "*/*",
          "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
          "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
          "sec-fetch-dest": "empty",
          "sec-fetch-mode": "cors",
          "sec-fetch-site": "same-origin",
          "x-requested-with": "XMLHttpRequest",
        },
        referrer: "https://www.moswar.ru/alley/",
        referrerPolicy: "strict-origin-when-cross-origin",
        body: "action=patriottv&time=1&__ajax=1&return_url=%2Falley%2F",
        method: "POST",
        mode: "cors",
        credentials: "include",
      });
    }
    function oo() {
      let t = AngryAjax.getCurrentUrl();
      return /^\/fight\/\d+\/?$/.test(t);
    }
    async function R() {
      await j(),
        await N({
          criteria: "type",
          minLvl: +player.level + 4,
          maxLvl: +player.level + 6,
        });
      let t = await E();
      console.log("[SMURF] Attack again in ", t),
        setTimeout(async () => await R(), 1e3 * 60 * (t + 3));
    }
    async function ne(t, e = 0, ...n) {
      try {
        let o = document.querySelector(
            "#personal > a.bubble > span > span.string"
          ),
          r = o.querySelector("span.text").innerText;
        if (
          r ===
          "\u0417\u0430\u0434\u0435\u0440\u0436\u0430\u043D \u0437\u0430 \u0431\u043E\u0438"
        )
          console.log(
            "\u0417\u0430\u0434\u0435\u0440\u0436\u0430\u043D \u0437\u0430 \u0431\u043E\u0438. \u041D\u0430\u043B\u0430\u0436\u0438\u0432\u0430\u044E \u0441\u0432\u044F\u0437\u0438..."
          ),
            await fetch("https://www.moswar.ru/police/relations/"),
            AngryAjax.goToUrl("/alley/");
        else if (
          r ===
          "\u041E\u0436\u0438\u0434\u0430\u043D\u0438\u0435 \u0431\u043E\u044F"
        )
          try {
            let a = +o.querySelector("span.timeleft").getAttribute("timer");
            return (
              console.log(
                r,
                `
\u041F\u0440\u043E\u0431\u0443\u044E \u0437\u0430\u043D\u043E\u0432\u043E \u0447\u0435\u0440\u0435\u0437: `,
                a
              ),
              setTimeout(() => t(...n), (a + e) * 1e3),
              !0
            );
          } catch (a) {
            return (
              console.log(
                `Waiting for fight. Time unknown... skipping...
`,
                a
              ),
              !1
            );
          }
      } catch {
        return (
          console.log(`[\u2705] All checks passed.
`),
          !1
        );
      }
    }
    async function oe(t, e = 0, n = {}) {
      if (await Ct())
        return (
          console.log(
            "\u{1F6A8} \u0418\u0434\u0435\u0442 \u0433\u0440\u0443\u043F\u043F\u043E\u0432\u043E\u0439 \u0431\u043E\u0439, \u043F\u0440\u043E\u0431\u0443\u044E \u0437\u0430\u043D\u043E\u0432\u043E \u0447\u0435\u0440\u0435\u0437 \u043C\u0438\u043D\u0443\u0442\u0443..."
          ),
          setTimeout(
            () => {
              AngryAjax.goToUrl("/alley/"), t(n);
            },
            (60 + e) * 1e3
          ),
          !0
        );
      let r = await E();
      return r
        ? (console.log(
            `\u23F1\uFE0F \u041A\u0443\u043B\u0434\u0430\u0443\u043D \u0432 \u0437\u0430\u043A\u043E\u0443\u043B\u043A\u0430\u0445. \u041F\u0440\u043E\u0431\u0443\u044E \u0447\u0435\u0440\u0435\u0437 ${v(r)}.`
          ),
          setTimeout(() => t(n), (r + e) * 1e3),
          !0)
        : !1;
    }
    async function vt() {
      if (await it(vt)) return;
      console.log("\u{1F37C} Searching for victims...");
      let e = await (
          await fetch("https://www.moswar.ru/alley/search/type/", {
            headers: {
              accept: "*/*",
              "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
              "content-type":
                "application/x-www-form-urlencoded; charset=UTF-8",
              "sec-fetch-dest": "empty",
              "sec-fetch-mode": "cors",
              "sec-fetch-site": "same-origin",
              "x-requested-with": "XMLHttpRequest",
            },
            referrer: "https://www.moswar.ru/alley/search/type/",
            referrerPolicy: "strict-origin-when-cross-origin",
            body: "type=victim&werewolf=0&nowerewolf=1&__ajax=1&return_url=%2Falley%2F",
            method: "POST",
            mode: "cors",
            credentials: "include",
          })
        ).text(),
        { content: n } = JSON.parse(e),
        o = L(n),
        r = K(o);
      if (!r) return console.log("\u{1F50E} Could not find victim.");
      console.log("\u{1F50E} Found victim:", r);
      let a = await _t(r);
      return (
        a && (console.log("\u2705 Fight completed. ", a), await re(a)),
        setTimeout(() => vt(), 5.1 * 60 * 1e3)
      );
    }
    async function et(t = 5) {
      if (await it(et)) return;
      let n = await (
          await fetch("https://www.moswar.ru/alley/search/type/", {
            headers: {
              accept: "*/*",
              "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
              "content-type":
                "application/x-www-form-urlencoded; charset=UTF-8",
              "sec-fetch-dest": "empty",
              "sec-fetch-mode": "cors",
              "sec-fetch-site": "same-origin",
              "x-requested-with": "XMLHttpRequest",
            },
            referrer: "https://www.moswar.ru/alley/search/type/",
            referrerPolicy: "strict-origin-when-cross-origin",
            body: "type=enemy&werewolf=0&__ajax=1&return_url=%2Falley%2F",
            method: "POST",
            mode: "cors",
            credentials: "include",
          })
        ).text(),
        { content: o } = JSON.parse(n),
        r = L(o),
        a = K(r);
      if (!a)
        return (
          console.log(
            "\u{1F50E} Could not find enemy, searching again in 1 minute..."
          ),
          setTimeout(() => et(), 60 * 1e3)
        );
      console.log("\u{1F94A} Found enemy, attacking:", a),
        (await _t(a)) &&
          (console.log("\u2705 Fight completed. Searching again in 5 minutes."),
          setTimeout(() => et(), t * 60 * 1e3));
    }
    function Je(t, e = 10) {
      let n = [...t.querySelectorAll(".fighter2-cell .stats > .stat span.num")]
        .slice(0, -1)
        .map((r) => +r.innerText)
        .reduce((r, a) => r + a, 0);
      return [...t.querySelectorAll(".fighter1-cell .stats > .stat span.num")]
        .slice(0, -1)
        .map((r) => +r.innerText)
        .reduce((r, a) => r + a, 0) -
        n <
        e
        ? (console.log("Opponent too strong, looking for another opponent."),
          !1)
        : !0;
    }
    async function re(t) {
      let n = await (await fetch("https://www.moswar.ru/fight/" + t)).text(),
        r = new DOMParser().parseFromString(n, "text/html");
      try {
        let a = +r
            .querySelector(".result .tugriki")
            .innerText.split(",")
            .join(""),
          s = r.querySelector(".fighter2 .user a").innerHTML.slice(1);
        if (
          (console.log(`\u{1F50E} Loot: ${a} \u{1F4B5} from opponent: ${s} `),
          a < 2e5)
        ) {
          let c = r.querySelector(".fighter2 .user a").innerHTML.slice(1),
            l = K(r);
          await Zt(c, l);
        } else a > 3e5 && (await Yt(s, "victim"));
        return t;
      } catch (a) {
        console.log("Fight not found", a);
      }
      return !1;
    }
    async function Tt() {
      return !!(await f(
        "#content > table.layout > tbody > tr > td.slots-cell > ul > li.avatar.avatar-back-12 > div.icons-place > a > i",
        "https://www.moswar.ru/player/"
      ));
    }
    async function $t({
      intervalMinutes: t,
      minLvl: e,
      maxLvl: n,
      criteria: o,
    }) {
      if (await Tt()) {
        console.log("\u{1F6A8} You have an injury. Skipping fight mode.");
        return;
      }
      await j(),
        console.log(`[\u{1F94A}] Fight mode started.
Searching by level (${e}-${n})`);
      try {
        await N({ minLvl: e, maxLvl: n });
      } catch {
        console.log(
          "\u{1F6A7} Could not find opponent. Retrying in 1 minute..."
        ),
          setTimeout(
            () => $t({ intervalMinutes: t, minLvl: e, maxLvl: n, criteria: o }),
            60 * 1e3
          );
      }
      setTimeout(
        () => $t({ intervalMinutes: t, minLvl: e, maxLvl: n, criteria: o }),
        t * 60 * 1e3
      );
    }
    async function C(t = 5) {
      try {
        if (await Tt()) {
          console.log("\u{1F6A8} You have an injury. Skipping rat mode.");
          return;
        }
        if (await ne(C, t)) {
          console.log("\u{1F6A8} You are busy. Skipping rat mode.");
          return;
        }
        let o = await f(
          "#content-no-rat > tbody > tr > td:nth-child(1) > div:nth-child(1) > div > div > p.holders > small",
          "https://www.moswar.ru/metro/"
        );
        if (o) {
          let s = +o.getAttribute("timer");
          return (
            console.log(`\u{1F400} Rat over. Retrying in ${v(s)}.`),
            setTimeout(() => C(t), (s + 2) * 1e3)
          );
        }
        if (AngryAjax.getCurrentUrl().includes("fight")) {
          let s = setInterval(groupFightMakeStep, 500);
          setTimeout(() => clearInterval(s), 4e3);
        }
        let r = await E();
        if (r) {
          console.log(`[\u{1F400} Track Rat] \u2744\uFE0F Alley Cooldown.
 Retrying in ${v(r)}`),
            setTimeout(() => C(), r * 1e3);
          return;
        }
        let a = (
          await f("#timer-rat-fight .value", "https://www.moswar.ru/metro/")
        )?.getAttribute("timer");
        if (a && +a > 0) {
          let s = +a;
          return (
            console.log(`[\u{1F400} Track Rat] Rat Cooldown.
Retrying in ${v(s)}.`),
            setTimeout(() => C(), s * 1e3)
          );
        }
        console.log("[\u{1F400} Track Rat] ATTACK!!1"),
          await j(),
          await ie(),
          setTimeout(() => C(), t * 60 * 1e3);
      } catch (e) {
        console.log(
          `[\u{1F400} Track Rat] Could not find rat.
`,
          e
        );
      }
    }
    async function ie() {
      await j(),
        await fetch("https://www.moswar.ru/metro/track-rat/", {
          headers: {
            accept: "*/*",
            "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
            "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "same-origin",
            "x-requested-with": "XMLHttpRequest",
          },
          referrer: "https://www.moswar.ru/metro/",
          referrerPolicy: "strict-origin-when-cross-origin",
          body: "__referrer=%2Fmetro%2F&return_url=%2Fmetro%2F",
          method: "POST",
          mode: "cors",
          credentials: "include",
        }),
        await I(0.5),
        await fetch("https://www.moswar.ru/metro/fight-rat/", {
          headers: {
            accept: "*/*",
            "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
            "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "same-origin",
            "x-requested-with": "XMLHttpRequest",
          },
          referrer: "https://www.moswar.ru/metro/",
          referrerPolicy: "strict-origin-when-cross-origin",
          body: "__referrer=%2Fmetro%2F&return_url=%2Fmetro%2F",
          method: "POST",
          mode: "cors",
          credentials: "include",
        }),
        await AngryAjax.goToUrl("/metro");
    }
    async function te(t = "work") {
      await fetch("https://www.moswar.ru/metro/", {
        headers: {
          accept: "*/*",
          "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
          "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
          "x-requested-with": "XMLHttpRequest",
        },
        body: `action=${t}&__referrer=%2Fmetro%2F&return_url=%2Fmetro%2F`,
        method: "POST",
        mode: "cors",
        credentials: "include",
      });
    }
