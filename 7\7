=== Часть 7\7===

async function Nn({
      selector: t,
      url: e,
      imgSrc: n,
      targetHref: o,
      onclick: r,
    }) {
      if (!t || !e || !n) {
        console.log("Could not fetch timer. Data missing.");
        return;
      }
      let a = await f(t, e);
      o === "/dinopark/" &&
        (n = (
          await f(".dinopark-dino-pic__img", "https://www.moswar.ru/dinopark/")
        ).getAttribute("src"));
      let s = A(
        `<img style="width: 56px; height: 56px; cursor: pointer; ${o === "/shaman/" && "transform: scale(1.4);transform-origin: center;"}" src=${n} />`
      );
      if (a === void 0) return !1;
      a === null
        ? (a = A("<span>\u0413\u043E\u0442\u043E\u0432\u043E</span>"))
        : a.innerText ===
            "\u0417\u0430\u0431\u0440\u0430\u0442\u044C \u043F\u043E\u0439\u043B\u043E!"
          ? (a.innerText = "\u0413\u043E\u0442\u043E\u0432\u043E")
          : countdown(a),
        (a.style.cssText = Ie.hawthorn),
        a?.getAttribute("class")?.includes("button") &&
          $(a).css({ lineHeight: "24px", padding: "3px 12px" }),
        o === "/badasrobot/" && a.styles;
      let c = A("<div></div>");
      return (
        (c.style.cssText =
          "display: flex; align-items: center; flex-direction: column;"),
        c.appendChild(s),
        c.appendChild(a),
        o && s.addEventListener("click", () => AngryAjax.goToUrl(o)),
        r && s.addEventListener("click", r),
        c
      );
    }
    async function Kt() {
      let t = async () => {
          let o = (
              await Promise.all(
                On.map(async (s) => {
                  try {
                    return await Nn(s);
                  } catch (c) {
                    return console.log("Error processing timer:", s, c), null;
                  }
                })
              )
            ).filter(Boolean),
            r = A(
              `<div class="timers-container" style="${Ie.timersContainer}"></div>`
            );
          function a() {
            window.innerWidth < 1330
              ? (r.style.display = "none")
              : (r.style.display = "grid");
          }
          window.addEventListener("resize", a),
            a(),
            r.replaceChildren(...o),
            document.querySelector(".main-block").appendChild(r);
        },
        e = A(`
      <div class="button" style="position: fixed; top: 32px; right: 8px;" id="timers-trigger"><span class="f"><i class="rl"></i><i class="bl"></i><i class="brc"></i><div class="c" style="padding: 1px 3px;">
      \u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C \u0422\u0430\u0439\u043C\u0435\u0440\u044B
      </div></span></div>
      `);
      e.addEventListener("click", () => {
        t(), e.remove();
      }),
        document.querySelector(".main-block").appendChild(e);
    }
    var Ie = {
      hawthorn: `
    text-align: center;
    margin: auto 4px;
    font-family: 'bloccregular';
    font-size: 16px;
    color: #ffffff;
    text-shadow: rgb(73, 73, 73) 2px 0px 0px, rgb(73, 73, 73) 1.75517px 0.958851px 0px, rgb(73, 73, 73) 1.0806px 1.68294px 0px, rgb(73, 73, 73) 0.141474px 1.99499px 0px, rgb(73, 73, 73) -0.832294px 1.81859px 0px, rgb(73, 73, 73) -1.60229px 1.19694px 0px, rgb(73, 73, 73) -1.97998px 0.28224px 0px, rgb(73, 73, 73) -1.87291px -0.701566px 0px, rgb(73, 73, 73) -1.30729px -1.5136px 0px, rgb(73, 73, 73) -0.421592px -1.95506px 0px, rgb(73, 73, 73) 0.567324px -1.91785px 0px, rgb(73, 73, 73) 1.41734px -1.41108px 0px, rgb(73, 73, 73) 1.92034px -0.558831px 0px;
  `,
      timersContainer: `
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 8px;
    min-width: 190px;
    position: fixed;
    top: 32px;
    right: 8px;
    font-size: 79%;
    font-family: Tahoma, Arial, sans-serif;
    line-height: 1.3;
    padding: 12px 6px;
    border-radius: 8px;
    background: rgba(0, 0, 0, 0.8);
    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3);
    border: none;
    min-width: 190px;
    `,
    };
    var Le = window.player,
      Xt = window.showAlert;
    var Vt = {
      accept: "*/*",
      "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
      "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
      "sec-fetch-dest": "empty",
      "sec-fetch-mode": "cors",
      "sec-fetch-site": "same-origin",
      "x-requested-with": "XMLHttpRequest",
    };
    async function Rn() {
    let t = await fetch("https://www.moswar.ru/casino/", {
        headers: Vt,
        referrer: "https://www.moswar.ru/casino/",
        referrerPolicy: "strict-origin-when-cross-origin",
        body: "action=ore&count=20",
        method: "POST",
        mode: "cors",
        credentials: "include",
    }),
    { success: e } = await t.json();
    return { success: e };
}

async function it(t) {
    let e = await E();
    return e
    ? (Xt(
        `${t.name}`,
        `\u{1F6A7} Cooldown in effect. Retrying in ${e} seconds.`
        ),
        setTimeout(t, (e + 5) * 1e3),
        !0)
    : !1;
}

async function En(t = "196690061") {
    await fetch(`https://www.moswar.ru/player/json/withdraw/${t}/`, {
        headers: {
            accept: "application/json, text/javascript, */*; q=0.01",
            "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
            "if-modified-since": new Date().toUTCString(),
            "sec-ch-ua": '"Chromium";v="131", "Not_A Brand";"v="24"',
            "sec-ch-ua-mobile": "?0",
            "sec-ch-ua-platform":
                Le.nickname === "barifan" ? '"macOS"' : '"Linux"',
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "same-origin",
            "x-requested-with": "XMLHttpRequest",
        },
        referrer: "https://www.moswar.ru/player/",
        referrerPolicy: "strict-origin-when-cross-origin",
        body: null,
        method: "GET",
        mode: "cors",
        credentials: "include",
    });
}

async function gt() {
    try {
        let e = (
            await f(
                "#content > div > table > tbody > tr > td:nth-child(1) > div > div > div.change-area > div.exchange > div.get > div > div > img",
                "https://www.moswar.ru/factory/build/bronevik/"
            )
        ).getAttribute("alt"),
        o = +(
            await f(
                "#content > div > table > tbody > tr > td:nth-child(1) > div > div > div.change-area > div.cooldown-wrapper > span.cooldown",
                "https://www.moswar.ru/factory/build/bronevik/"
            )
        ).getAttribute("endtime");
        if (
            e ===
            "\u041A\u0440\u0430\u0441\u043D\u044B\u0439 \u0441\u0442\u044F\u0433"
        )
            return (
                console.log(`[\u{1F6A9}] Found matching piece: ${e}. Buying it...`),
                await fetch("https://www.moswar.ru/factory/exchange/", {
                    headers: {
                        accept: "*/*",
                        "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
                        "content-type":
                            "application/x-www-form-urlencoded; charset=UTF-8",
                        "sec-fetch-dest": "empty",
                        "sec-fetch-mode": "cors",
                        "sec-fetch-site": "same-origin",
                        "x-requested-with": "XMLHttpRequest",
                    },
                    referrer: "https://www.moswar.ru/factory/build/bronevik/",
                    referrerPolicy: "strict-origin-when-cross-origin",
                    body: "action=exchange&code=bronevik&__referrer=%2Ffactory%2Fbuild%2Fbronevik%2F&return_url=%2Ffactory%2Fbuild%2Fbronevik%2F",
                    method: "POST",
                    mode: "cors",
                    credentials: "include",
                }),
                setTimeout(gt, 2e3)
            );
        console.log(`[\u{1F6A9}] No matching piece. (${e})`);
        let r = o * 1e3 - Date.now() + 3e3;
        r > 0
            ? (console.log(
                `[\u{1F6A9}] Bronevik check in ${v(Math.floor(r / 1e3))}.`
                ),
                setTimeout(gt, r))
            : console.log("[\u{1F6A9}] Bronevik PIECE CHECK!");
    } catch (t) {
        console.log(
            `[\u{1F6A9}] Could not find bronevik piece.\n`,
            t
        ),
        setTimeout(() => gt(), 1e3);
    }
}

async function Hn() {
    await B("1052323"), await U(), await P(), await C(), await O();
}

async function Dn() {
            await Et(),
            await Ht(),
            await dt(),
            await Kt(),
            ut(),
            Pe(),
            Dt(),
            Gt(),
            zt(),
            mt(),
            console.log("\u2139\uFE0F Enhanced client-side functionality."),
            window.SMURF_MODE && (console.log("SMURF MODE"), await Me()),
            $(document).ajaxStop(mt);
        }

        async function Me() {
            await U(1), await P(10), await R(), await C(20);
            async function t() {
                await fetch("https://www.moswar.ru/quest/", {
                    headers: {
                        accept: "*/*",
                        "accept-language": "en-GB,en;q=0.9",
                        "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
                        "sec-fetch-dest": "empty",
                        "sec-fetch-mode": "cors",
                        "sec-fetch-site": "same-origin",
                        "x-requested-with": "XMLHttpRequest",
                    },
                    referrer: "https://www.moswar.ru/quest/",
                    referrerPolicy: "strict-origin-when-cross-origin",
                    body: "action=nextstep&__ajax=1&return_url=%2Fquest%2F",
                    method: "POST",
                    mode: "cors",
                    credentials: "include",
                });
            }
            $(document).ajaxStop(function () {
                location.pathname === "/quest/" && t();
            });
        }

        // === Глобальные функции ===
        window.updateStatus = function(text, isError = false) {
            const statusEl = document.getElementById('mw-status');
            if (!statusEl) return;
            
            statusEl.innerHTML = text;
            statusEl.style.color = isError ? '#ff6b6b' : '#51cf66';
            
            if (!isError) {
                setTimeout(() => {
                    if (statusEl.innerHTML === text) {
                        statusEl.innerHTML = 'Ожидание действий...';
                        statusEl.style.color = '#868e96';
                    }
                }, 5000);
            }
        };

        window.resetSlot = function(index) {
            const raw = localStorage.getItem("moswar_saved_sets");
            if (!raw) return;
            const sets = JSON.parse(raw);
            if (!Array.isArray(sets)) return;
            sets[index] = null;
            localStorage.setItem("moswar_saved_sets", JSON.stringify(sets));
            drawSetSummary();
            updateSetIndicator();
            updateStatus(`Слот ${index + 1} очищен`);
        };

        window.sendSet = async function(slot) {
            const sets = JSON.parse(localStorage.getItem("moswar_saved_sets") || "{}");
            const set = sets[String(slot)];
            if (!set || !set.length) {
                alert("❌ Комплект не найден или пуст");
                return;
            }

            localStorage.setItem("moswar_active_set", String(slot));
            updateSetIndicator();

            let refueled = 0;
            let launched = 0;

            updateStatus(`🚚 Отправка комплекта (${set.length} машин)...`);

            for (let { carId, rideId } of set) {
                try {
                    // Проверяем топливо
                    const fuel = await fetch(`/automobile/car/${carId}/`, {
                        credentials: "include"
                    }).then(r => r.text());

                    const fuelMatch = fuel.match(/Топливо:[^0-9]*([0-9]+)/i);
                    const currentFuel = fuelMatch ? parseInt(fuelMatch[1], 10) : 0;

                    // Заправляем если нужно
                    if (currentFuel === 0) {
                    await fetch(`/automobile/buypetrol/${carId}/`, {
                            method: "POST",
                            credentials: "include",
                            headers: { "Content-Type": "application/x-www-form-urlencoded" },
                            body: `__ajax=1&return_url=%2Fautomobile%2Fcar%2F${carId}`
                        });
                        refueled++;
                        updateStatus(`⛽ Заправлена машина ${carId}`);
                        await new Promise(res => setTimeout(res, 500));
                    }

                    // Отправляем
                    await fetch("/automobile/ride/", {
                        method: "POST",
                        credentials: "include",
                        headers: { "Content-Type": "application/x-www-form-urlencoded" },
                        body: `car=${carId}&direction=${rideId}&__ajax=1`
                    });

                    launched++;
                    updateStatus(`📤 Отправлена машина ${carId} ➜ ${rideId}`);
                    await new Promise(res => setTimeout(res, 500));

                } catch (err) {
                    console.warn(`❌ Ошибка с машиной ${carId}:`, err);
                    updateStatus(`❌ Ошибка с машиной ${carId}`, true);
                }
            }

            updateStatus(`✅ Комплект ${slot} отправлен.\nОтправлено: ${launched}, заправлено: ${refueled}`);
        };

        window.applySavedSet = function(slot) {
            const sets = JSON.parse(localStorage.getItem("moswar_saved_sets") || "{}");
            const selected = sets[slot];
            if (selected && selected.length) {
                document.querySelectorAll('input.dynamic-checkbox:checked').forEach(cb => cb.checked = false);
                selected.forEach(s => {
                    const carInput = document.querySelector(`input[name="car"][value="${s.carId}"]`);
                    if (carInput) {
                        const li = carInput.closest("li");
                        const dirInput = li.querySelector(`input[name="direction"][value="${s.rideId}"]`);
                        if (dirInput) {
                            const checkbox = li.querySelector('input.dynamic-checkbox');
                            if (checkbox) checkbox.checked = true;
                        }
                    }
                });
                console.log(`✅ Применен комплект из слота ${slot}`);
            }
        };

        window.saveSetModal = function() {
            const rides = Array.from(document.querySelectorAll('.cars-trip-choose input[type="checkbox"]:checked:not([disabled])')).map(cb => {
                const li = cb.closest("li");
                return {
                    carId: li.querySelector("input[name='car']").value,
                    rideId: li.querySelector("input[name='direction']:checked")?.value
                };
            }).filter(r => r.carId && r.rideId);
            
            console.log("💾 Выбрано:", rides);
            alert("💾 Сохранение комплекта: " + rides.length + " машин");
            
            if (!rides.length) return;
            
            const slot = prompt("Введите номер слота (1, 2, 3 или 4):");
            if (!["1", "2", "3", "4"].includes(slot)) return;
            
            const sets = JSON.parse(localStorage.getItem("moswar_saved_sets") || "{}");
            sets[slot] = rides;
            localStorage.setItem("moswar_saved_sets", JSON.stringify(sets));
            localStorage.setItem("moswar_active_set", slot);
            updateSetIndicator();
            applySavedSet(slot);
            drawSetSummary();
            
            alert("✅ Сохранено!");
        };

        window.refuelAllTransport = async function() {
            const cars = Array.from(document.querySelectorAll('.cars-trip-choose input[name="car"]:not([disabled])'));
            let refueled = 0;
            
            updateStatus("⛽ Проверка и заправка техники...");
            
            for(const input of cars) {
                const carId = input.value;
                try {
                    const carPage = await fetch(`https://www.moswar.ru/automobile/car/${carId}/`).then(r => r.text());
                    if(carPage.includes('Бак пуст') || carPage.includes('Бак заполнен на')) {
                        await fetch(`https://www.moswar.ru/automobile/buypetrol/${carId}/`, {
                            method: "POST",
                            credentials: "include", 
                            headers: {"Content-Type": "application/x-www-form-urlencoded"},
                            body: `__ajax=1&return_url=%2Fautomobile%2Fcar%2F${carId}`
                        });
                        refueled++;
                        updateStatus(`⛽ Заправлено: ${refueled}`);
                    }
                } catch(err) {
                    console.warn(`❌ Ошибка при заправке ${carId}:`, err);
                }
                await new Promise(r => setTimeout(r, 300));
            }
            updateStatus(`✅ Заправлено машин: ${refueled}`);
        };

        return He(Gn);
    })();

    utils_.init();
    //# sourceMappingURL=bundle.js.map
