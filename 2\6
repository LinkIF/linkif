=== Часть 2\6===

async function rt() {
      await fetch("https://www.moswar.ru/camp/gypsy/", {
        headers: {
          accept: "application/json, text/javascript, */*; q=0.01",
          "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
          "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
          "x-requested-with": "XMLHttpRequest",
        },
        referrer: "https://www.moswar.ru/camp/gypsy/",
        body: "action=gypsyStart&gametype=0",
        method: "POST",
        mode: "cors",
        credentials: "include",
      }),
        await fetch("https://www.moswar.ru/camp/gypsy/", {
          headers: {
            accept: "application/json, text/javascript, */*; q=0.01",
            "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
            "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
            "x-requested-with": "XMLHttpRequest",
          },
          referrer: "https://www.moswar.ru/camp/gypsy/",
          body: "action=gypsyAuto",
          method: "POST",
          mode: "cors",
        }),
        AngryAjax.goToUrl("/camp/gypsy/");
    }
    function Qe(t, e) {
      return (
        (t = t.toLowerCase()),
        Object.values(e).filter((n) => n.name.toLowerCase().includes(t))
      );
    }
    function tn(t) {
      return Object.values(t).map((e) => ({
        expiryDate: e[0],
        count: Number(e[1]),
        itemId: e[3],
      }));
    }
    async function en(t) {
      await fetch("https://www.moswar.ru/phone/call/tradeItemView/", {
        headers: {
          accept: "application/json, text/javascript, */*; q=0.01",
          "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
          "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
          "sec-ch-ua": '"Not:A-Brand";v="24", "Chromium";v="134"',
          "sec-ch-ua-mobile": "?0",
          "sec-ch-ua-platform": '"macOS"',
          "sec-fetch-dest": "empty",
          "sec-fetch-mode": "cors",
          "sec-fetch-site": "same-origin",
          "x-requested-with": "XMLHttpRequest",
        },
        body: `ajax=1&item=${t}&slot=phone3`,
        method: "POST",
        mode: "cors",
        credentials: "include",
      });
      let n = await (
          await fetch("https://www.moswar.ru/phone/call/giveItem/", {
            headers: {
              accept: "application/json, text/javascript, */*; q=0.01",
              "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
              "content-type":
                "application/x-www-form-urlencoded; charset=UTF-8",
              "sec-fetch-mode": "cors",
              "sec-fetch-site": "same-origin",
              "x-requested-with": "XMLHttpRequest",
            },
            referrer: "https://www.moswar.ru/phone/call",
            referrerPolicy: "strict-origin-when-cross-origin",
            body: "ajax=1&slot=phone3",
            method: "POST",
            mode: "cors",
            credentials: "include",
          })
        ).text(),
        { prize: o } = JSON.parse(n);
      return console.log(o), $(`<div class="prize-container">${o}</div>`);
    }
    async function jt() {
      let t = await W(0),
        e = Qe("\u0441\u0438\u0440\u0438", t)[0],
        n = tn(e.stackList);
      console.log(n);
      for (let o of n) for (let r = 0; r < o.count; r++) await en(o.itemId);
    }
    async function ae() {
      let n = (
        await (
          await fetch("https://www.moswar.ru/casino/blackjack/", {
            method: "POST",
            headers: {
              accept: "application/json, text/javascript, */*; q=0.01",
              "content-type":
                "application/x-www-form-urlencoded; charset=UTF-8",
              "x-requested-with": "XMLHttpRequest",
            },
            body: "action=new&bet=10",
            credentials: "include",
          })
        ).json()
      ).newRightHand.reduce((o, r) => o + r[2], 0);
      for (; n < 17; ) {
        await new Promise((a) => setTimeout(a, 500));
        let r = await (
          await fetch("https://www.moswar.ru/casino/blackjack/", {
            method: "POST",
            headers: {
              accept: "application/json, text/javascript, */*; q=0.01",
              "content-type":
                "application/x-www-form-urlencoded; charset=UTF-8",
              "x-requested-with": "XMLHttpRequest",
            },
            body: "action=more",
            credentials: "include",
          })
        ).json();
        if (!r.card || ((n += r.card[0][2]), n > 21)) break;
      }
      await new Promise((o) => setTimeout(o, 500)),
        await fetch("https://www.moswar.ru/casino/blackjack/", {
          method: "POST",
          headers: {
            accept: "application/json, text/javascript, */*; q=0.01",
            "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
            "x-requested-with": "XMLHttpRequest",
          },
          body: "action=stop",
          credentials: "include",
        });
    }
    function k({
      text: t,
      onClick: e = () => {},
      title: n,
      className: o,
      disableAfterClick: r = !0,
    }) {
      let a = A(
        `<button type="button" class="${o}-btn button"><span style="float: none;" class="f"><i class="rl"></i><i class="bl"></i><i class="brc"></i><div class="c">${t}</div></span></button>`
      );
      return (
        (a.setText = function (s) {
          $(a).find(".c").text(s);
        }),
        a.addEventListener("click", async (s) => {
          if (!a.classList.contains("disabled")) {
            a.classList.add("disabled");
            try {
              await e(s);
            } catch (c) {
              console.error(e.toString(), c);
            }
            r || a.classList.remove("disabled");
          }
        }),
        n && (a.title = n),
        a
      );
    }
    function Ft({ toggleText: t, className: e, items: n, isOpen: o = !0 }) {
      let r = $(`<div class="dropdown ${e}"></div>`).css({
        display: "flex",
        gap: "8px",
        justifyContent: "center",
        flexWrap: "wrap",
        alignItems: "center",
      });
      o || r.hide(),
        n.forEach((c) => {
          r.append(c);
        });
      let a = k({
          text: t,
          onClick: (c) => {
            let l = c.currentTarget;
            r.toggle("fast"), l.classList.remove("disabled");
          },
        }),
        s = $("<div>")
          .css({
            display: "flex",
            gap: "8px",
            justifyContent: "center",
            flexDirection: "column",
            alignItems: "center",
          })
          .append(a, r);
      return (
        (s.append = (c) => {
          r.append(c);
        }),
        s
      );
    }
    function at({
      label: t,
      action: e,
      className: n,
      min: o = 1,
      max: r = 500,
    }) {
      let a = $(`<div class="${n} btn-input-field"></div>`).css({
          display: "flex",
          flexDirection: "column",
          alignItems: "center",
          gap: "4px",
          padding: "4px",
        }),
        s = $("<input>", {
          type: "number",
          min: o,
          max: r,
          value: o,
          class: "input-field",
        })
          .css({ width: "60px", textAlign: "center" })
          .on("input", function () {
            let l = parseInt($(this).val(), 10);
            l || $(this).val(o),
              l > r && $(this).val(r),
              l < o && $(this).val(o),
              c.setText(`${t} x${$(this).val()}`);
          }),
        c = k({
          text: `${t} x${o}`,
          className: n,
          onClick: async () => {
            let l = parseInt(s.val(), 10);
            if (isNaN(l) || l < o || l > r) return;
            c.classList.add("disabled");
            let p = Date.now();
            for (let u = 0; u < l; u++) await e();
            let g = Date.now() - p;
            c.classList.remove("disabled"),
              showAlert(
                "\u0413\u043E\u0442\u043E\u0432\u043E",
                `\u041F\u043E\u0432\u0442\u043E\u0440\u0438\u043B \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 ${l} \u0440\u0430\u0437 \u0437\u0430 ${v(Math.floor(g / 1e3))}.`
              );
          },
        });
      return a.append(s, $(c)), a;
    }
    var Y = [
        160, 198, 64, 48, 165, 46, 167, 211, 197, 56, 50, 122, 215, 47, 110,
        115, 220, 196, 133, 87, 92,
      ],
      ce = [155, 97, 93, 190, 121, 158],
      H = [
        192, 158, 190, 121, 93, 97, 135, 155, 182, 178, 195, 219, 59, 216, 212,
        183, 173, 159, 156, 149, 146, 134, 119, 111, 95, 88, 84, 78, 74, 69, 68,
        65, 58, 55, 54, 52, 51, 49, 44, 38, 36, 35,
      ],
      qt = [141, 19, 85];
    async function le(t = "979786") {
      await Mt(t),
        fetch("https://www.moswar.ru/automobile/bringup/", {
          headers: {
            accept: "*/*",
            "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
            "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "same-origin",
            "x-requested-with": "XMLHttpRequest",
          },
          referrer: "https://www.moswar.ru/automobile/bringup/",
          referrerPolicy: "strict-origin-when-cross-origin",
          body: `car=${t}&__ajax=1&return_url=%2Farbat%2F`,
          method: "POST",
          mode: "cors",
          credentials: "include",
        });
    }
    async function B(t = "979786") {
      if (
        !(
          new Intl.DateTimeFormat("en-US", {
            weekday: "long",
            timeZone: "Europe/Moscow",
          }).format(new Date()) === "Monday"
        )
      ) {
        showAlert(
          "\u{1F695}",
          "\u041D\u0435 \u043F\u043E\u043D\u0435\u0434\u0435\u043B\u044C\u043D\u0438\u043A."
        );
        return;
      }
      let n = await f("#cooldown", "https://www.moswar.ru/arbat/");
      if (n)
        try {
          let a = await n.getAttribute("timer");
          console.log(`[\u{1F695}] Retrying in ${v(a)} minutes.`),
            setTimeout(() => B(t), +a * 1e3);
          return;
        } catch {
          console.log("[\u{1F695}] Cooldown timer not found.");
        }
      await le(t), await I(3);
      let r = await (
        await f("#cooldown", "https://www.moswar.ru/arbat/")
      ).getAttribute("timer");
      console.log(`[\u{1F695}] \u2705 Done. Retrying in ${v(r)} minutes.`),
        setTimeout(() => B(t), +r * 1e3);
    }
    async function Pt(t = "1095154") {
      await fetch(`https://www.moswar.ru/automobile/buypetrol/${t}/`, {
        headers: {
          accept: "*/*",
          "accept-language": "en-GB,en;q=0.9",
          "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
          "sec-ch-ua": '"Chromium";v="131", "Not_A Brand";v="24"',
          "sec-ch-ua-mobile": "?0",
          "sec-ch-ua-platform": '"macOS"',
          "sec-fetch-dest": "empty",
          "sec-fetch-mode": "cors",
          "sec-fetch-site": "same-origin",
          "x-requested-with": "XMLHttpRequest",
        },
        referrer: `https://www.moswar.ru/automobile/buypetrol/${t}/`,
        referrerPolicy: "strict-origin-when-cross-origin",
        body: `__ajax=1&return_url=%2Fautomobile%2Fcar%2F${t}`,
        method: "POST",
        mode: "cors",
        credentials: "include",
      });
    }
    async function nn() {
      try {
        let e = (
          await f("#home-garage > div > div > a", "https://www.moswar.ru/home/")
        ).map((n) => n.getAttribute("href").split("/").splice(-2, 1)[0]);
        await Promise.all(e.map((n) => Pt(n)));
      } catch {
        console.log("Could not fuel all cars");
      }
    }


      function It() {
  return [...document.querySelectorAll('.actions input[type="checkbox"]:checked')]
    .map((cb) => {
      const li = cb.closest("li");
      if (!li) return null;

      const car = li.querySelector('input[name="car"]');
      const dir = li.querySelector('input[name="direction"]');
      if (!car || !dir) return null;

      return {
        carId: +car.value,
        rideId: +dir.value
      };
    })
    .filter(Boolean);
}


    async function Lt(t, e) {
      await Mt(t);
      let o = await (
          await fetch("https://www.moswar.ru/automobile/ride/", {
            body: new URLSearchParams({ direction: e, car: t, __ajax: "1" }),
            method: "POST",
            mode: "cors",
            credentials: "include",
          })
        ).text(),
        a = L(o).querySelector("body > .alert");
      (a.style.display = "block"),
        (a.style.position = "static"),
        (a.style.margin = "5px"),
        a.querySelector(".close-cross").remove();
      let s = $("#ride-alerts");
      s.length < 1 && (s = D("ride-alerts")),
        s.css({
          "align-items": "flex-start",
          overflowY: "scroll",
          maxHeight: "65vh",
          width: "90vw",
        }),
        s.append(a);
    }


async function pe() {
  const saved = JSON.parse(localStorage.getItem("moswar_saved_transport_set") || "[]");
  const rides = saved.length > 0 ? saved : It();
  alert(`[pe()] Подготовлено ${rides.length} машин:\n` + rides.map(r => `• carId: ${r.carId}, rideId: ${r.rideId}`).join("\n"));
}

async function de() {
  const saved = JSON.parse(localStorage.getItem("moswar_saved_transport_set") || "[]");
  const rides = saved.length > 0 ? saved : It();
  alert(`[de()] Подготовлено ${rides.length} машин:\n` + rides.map(r => `• carId: ${r.carId}, rideId: ${r.rideId}`).join("\n"));
}



    async function Mt(t = "979786") {
      let e = await f(
        ".fuel .neft",
        `https://www.moswar.ru/automobile/car/${t}/`
      );
      try {
        +e.innerText.split(":")[1].split("/")[0] === 0 &&
          (console.log("[Check Car Tank] Car tank is empty!"), await Pt(t));
      } catch {
        console.log("[Check Car Tank] Car tank not found");
      }
    }



function drawSetSummary() {
  const container = document.querySelector(".set-summary");
  if (!container) return;

  const sets = JSON.parse(localStorage.getItem("moswar_saved_sets") || "{}");
  container.innerHTML = "";

  for (let i = 1; i <= 4; i++) {
    const count = sets[i]?.length || 0;
    if (count > 0) {
      const slot = document.createElement("span");
      slot.textContent = `Слот ${i} (${count})`;
      slot.style.margin = "30px";
      container.appendChild(slot);
    }
  }
}


      function saveSetModal() {
        const rides = It();
        console.log("💾 Выбрано:", rides);
        alert("💾 Сохранение комплекта: " + rides.length + " машин");

        if (!rides.length) return;

        const slot = prompt("Введите номер слота (1, 2, 3 или 4):");
        if (!["1", "2", "3", "4"].includes(slot)) return;

        const sets = JSON.parse(localStorage.getItem("moswar_saved_sets") || "{}");
        sets[slot] = rides;
        localStorage.setItem("moswar_saved_sets", JSON.stringify(sets));
        localStorage.setItem("moswar_active_set", slot);
        updateSetIndicator();
        applySavedSet(slot); // Новая строка: Применяем сохраненный комплект сразу
        drawSetSummary();

        alert("✅ Сохранено!");
    }

   


      function sendSet(slot) {
				  const sets = JSON.parse(localStorage.getItem("moswar_saved_sets") || "{}");
				  const set = sets[String(slot)];
				  if (!set || !set.length) {
					alert("❌ Комплект не найден или пуст");
					return;
				  }

				  localStorage.setItem("moswar_active_set", String(slot));
				  updateSetIndicator();



				  let refueled = 0;
				  let launched = 0;

				  const delay = (ms) => new Promise(res => setTimeout(res, ms));

				  const sendAll = async () => {
					for (let { carId, rideId } of set) {
					  try {
						const fuel = await fetch(`/automobile/car/${carId}/`, {
						  credentials: "include"
						}).then(r => r.text());

						const fuelMatch = fuel.match(/Топливо:[^0-9]*([0-9]+)/i);
						const currentFuel = fuelMatch ? parseInt(fuelMatch[1], 10) : 0;

						if (currentFuel === 0) {
						  await fetch(`/automobile/buypetrol/${carId}/`, {
							method: "POST",
							credentials: "include",
							headers: { "Content-Type": "application/x-www-form-urlencoded" },
							body: `__ajax=1&return_url=%2Fautomobile%2Fcar%2F${carId}`
						  });
						  refueled++;
						  console.log(`⛽ Заправлена машина ${carId}`);
						  await delay(500);
						}

						await fetch("/automobile/ride/", {
						 method: "POST",
						 credentials: "include",
						 headers: { "Content-Type": "application/x-www-form-urlencoded" },
						 body: `car=${carId}&direction=${rideId}&__ajax=1`
						 });

						launched++;
						console.log(`📤 Отправлена машина ${carId} ➜ ${rideId}`);
						await delay(500);

					  } catch (err) {
						console.warn(`❌ Ошибка с машиной ${carId}:`, err);
					  }
					}

					alert(`✅ Комплект ${slot} отправлен.\nОтправлено: ${launched}, заправлено: ${refueled}`);
				  };

				  sendAll();
				}



    function It() {
        return [...document.querySelectorAll('input.dynamic-checkbox:checked')]
            .map(cb => {
                const li = cb.closest("li");
                if (!li) return null;

                const carInput = li.querySelector('input[name="car"]');
                const dirInput = li.querySelector('input[name="direction"]');
                if (!carInput || !dirInput) return null;

                return {
                    carId: +carInput.value,
                    rideId: +dirInput.value
                };
            })
            .filter(Boolean);
    }



								// Функиция отправки комплекта
							   function createSetSelectionModal() {
					  const slot = prompt("Введите номер комплекта (1-4):");
					  if (!slot) return;

					  const sets = JSON.parse(localStorage.getItem("moswar_saved_sets") || "{}");
					  const set = sets[String(slot)];
					  if (!set || !set.length) {
						alert("❌ Комплект не найден или пуст");
						return;
					  }

					  localStorage.setItem("moswar_active_set", String(slot));
					  updateSetIndicator();

					  let refueled = 0;
					  let launched = 0;

					  const delay = (ms) => new Promise(res => setTimeout(res, ms));

					  const sendAll = async () => {
						for (let { carId, rideId } of set) {
						  try {
							const fuel = await fetch(`/automobile/car/${carId}/`, {
							  credentials: "include"
							}).then(r => r.text());

							const fuelMatch = fuel.match(/Топливо:[^0-9]*([0-9]+)/i);
							const currentFuel = fuelMatch ? parseInt(fuelMatch[1], 10) : 0;

							if (currentFuel === 0) {
							  await fetch(`/automobile/buypetrol/${carId}/`, {
								method: "POST",
								credentials: "include",
								headers: { "Content-Type": "application/x-www-form-urlencoded" },
								body: `__ajax=1&return_url=%2Fautomobile%2Fcar%2F${carId}`
							  });
							  refueled++;
							  console.log(`⛽ Заправлена машина ${carId}`);
							  await delay(500);
							}

							await fetch("/automobile/ride/", {
							  method: "POST",
							  credentials: "include",
							  headers: { "Content-Type": "application/x-www-form-urlencoded" },
							  body: `car=${carId}&direction=${rideId}&__ajax=1`
							});

							launched++;
							console.log(`📤 Отправлена машина ${carId} ➜ ${rideId}`);
							await delay(500);

						  } catch (err) {
							console.warn(`❌ Ошибка с машиной ${carId}:`, err);
						  }
						}

						alert(`✅ Комплект ${slot} отправлен.\nОтправлено: ${launched}, заправлено: ${refueled}`);
					  };

					  sendAll();
					}


    function updateSetIndicator() {
        const slot = localStorage.getItem("moswar_active_set") || "–";
        const label = document.querySelector(".set-indicator-label");
        if (label) {
            const sets = JSON.parse(localStorage.getItem("moswar_saved_sets") || "{}");
            const count = sets[slot]?.length || 0;
            label.textContent = slot !== "–" ? `Комплект: ${slot} (${count})` : "Комплект: –";
        }
    }



    function applySavedSet(slot) {
        const sets = JSON.parse(localStorage.getItem("moswar_saved_sets") || "{}");
        const selected = sets[slot];
        if (selected && selected.length) {
            // Очищаем текущие выбранные элементы
            document.querySelectorAll('input.dynamic-checkbox:checked').forEach(cb => cb.checked = false);
            // Применяем сохраненный комплект
            selected.forEach(s => {
                const carInput = document.querySelector(`input[name="car"][value="${s.carId}"]`);
                if (carInput) {
                    const li = carInput.closest("li");
                    const dirInput = li.querySelector(`input[name="direction"][value="${s.rideId}"]`);
                    if (dirInput) {
                        const checkbox = li.querySelector('input.dynamic-checkbox');
                        if (checkbox) checkbox.checked = true;
                    }
                }
            });
            console.log(`✅ Применен комплект из слота ${slot}`);
        }
    }

    // Инициализация и восстановление последнего активного комплекта при загрузке страницы
    document.addEventListener("DOMContentLoaded", () => {
        const activeSet = localStorage.getItem("moswar_active_set");
        if (activeSet) {
            applySavedSet(activeSet); // Новая строка: Восстанавливаем последний активный комплект
            updateSetIndicator(); // Новая строка: Обновляем индикатор
        }

        // Добавляем MutationObserver для обеспечения добавления кнопок и повторного применения комплектов при необходимости
        const observer = new MutationObserver(() => {
            const target = document.querySelector("#content > div > div.block-bordered");
            if (typeof Ut === "function" && target && !target.querySelector("button")) {
                console.log("[🧪] Вызов Ut() для вставки кнопок");
                Ut();
                if (activeSet) applySavedSet(activeSet); // Новая строка: Переприменяем комплект после обновления UI
                updateSetIndicator(); // Новая строка: Обновляем индикатор после обновления UI
            }
        });
        observer.observe(document.body, { childList: true, subtree: true });

        // Добавляем кнопки или другие элементы UI, если нужно
        if (typeof Ut === "function") {
            Ut();


	   }
    });


 // === Интерфейс поездок и комплектов — компактная горизонтальная версия ===


      function Ut() {
  const container = $("<div>").css({
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    gap: "12px",
    padding: "10px"
  });

  // === Горизонтальный блок кнопок ===
  const topBar = document.createElement("div");
  topBar.style.display = "flex";
  topBar.style.flexWrap = "wrap";
  topBar.style.gap = "70px";
  topBar.style.justifyContent = "center";

  function makeButton(text, title, className, handler) {
    const b = document.createElement("button");
    b.textContent = text;
    b.title = title;
    b.className = className;
    b.onclick = handler;
    return b;
  }

  // Кнопки
  topBar.append(
    makeButton("🟢 Отправить", "Отправить выбранный транспорт", "mw-btn-green", async () => {
      const selected = [...document.querySelectorAll('input[type=checkbox]:checked')];
      for (let cb of selected) {
        try {
          const li = cb.closest("li");
          if (!li) continue;
          const carInput = li.querySelector('input[name="car"]');
          const dirInput = li.querySelector('input[name="direction"]');
          if (!carInput || !dirInput) continue;
          const carId = carInput.value;
          const rideId = dirInput.value;

          await Mt(carId);
          await fetch("/automobile/ride/", {
            method: "POST",
            credentials: "include",
            headers: { "Content-Type": "application/x-www-form-urlencoded" },
            body: `car=${carId}&direction=${rideId}&__ajax=1`
          });

          cb.checked = false;
          console.log(`📤 Отправлена машина ${carId} ➜ ${rideId}`);
        } catch (err) {
          console.warn("❌ Ошибка при отправке:", err);
        }
      }
    }),

    makeButton("⛽ Заправить", "Заправить все машины", "mw-btn-blue", async (event) => {
      const btn = event?.target;
      const originalText = btn.textContent;
      btn.textContent = "⏳ Заправка...";
      btn.disabled = true;

      const cars = Array.from(document.querySelectorAll('input[name="car"]'));
      let refueled = 0;

      await Promise.all(cars.map(async input => {
        const carId = input.value;
        try {
          await fetch(`https://www.moswar.ru/automobile/buypetrol/${carId}/`, {
            method: "POST",
            credentials: "include",
            headers: { "Content-Type": "application/x-www-form-urlencoded" },
            body: `__ajax=1&return_url=%2Fautomobile%2Fcar%2F${carId}`
          });
          console.log(`⛽ Заправлена машина: ${carId}`);
          refueled++;
        } catch (err) {
          console.warn(`❌ Ошибка при заправке ${carId}:`, err);
        }
      }));

      btn.textContent = `✅ ${refueled}`;
      setTimeout(() => {
        btn.textContent = originalText;
        btn.disabled = false;
      }, 3000);
    }),

    makeButton("💾", "Сохранить текущий комплект", "", () => saveSetModal()),
    makeButton("📤", "Выбрать комплект для отправки", "", () => createSetSelectionModal()),
    makeButton("🧹", "Сбросить все сохранённые комплекты", "", () => {
      localStorage.removeItem("moswar_saved_sets");
      localStorage.removeItem("moswar_active_set");
      updateSetIndicator();
      drawSetSummary();
      alert("🧹 Все комплекты удалены.");
    })
  );

  container.append(topBar);

  // === Список комплектов (только он!) ===
  const summary = document.createElement("div");
  summary.className = "set-summary";
  summary.style.fontSize = "13px";
  summary.style.lineHeight = "1.5";
  summary.style.marginTop = "4px";
  container.append(summary);

  $("#content > div > div.block-bordered").html(container);

  // Стилизацию транспорта и сетку оставим как есть
  const o = $("#content > div > div.cars-trip-choose.clearfix > div ul li");

  function r(c) {
    const { exceptionCars: l, planesAndBoats: p, rest: d, bannedCars: g } = rn(c);
    const u = [...l, ...p, ...on(d.reverse()), ...g];
    const w = $("#content > div > div.cars-trip-choose.clearfix > div ul");
    $(u).appendTo(w);
  }

  function a(c) {
    c.each((l, p) => {
      $(p).find("table.title").remove();
      $(p).find("table.ride-info").remove();
      $(p).css({ minHeight: "auto", height: "auto" });
      $(p).find(".picture .timeout").each((d, g) => {
        $(g).css({ height: "auto" });
        $(g).contents().not("span.ride-cooldown").remove();
      });
    });
  }

  r(o);
  a(o);

  const s = $("#content > div > div.cars-trip-choose.clearfix > div ul");
  o.css("box-shadow", "0px 1px 9px 2px rgba(24, 22, 38, 0.5)");
  s.css({
    display: "grid",
    "grid-template-columns": "repeat(auto-fit, minmax(200px, 1fr))",
    gap: "10px",
  });

  $(".cars-trip-choose.clearfix").css({
    position: "relative",
    left: "35%",
    transform: "translateX(-50%)",
    width: "80vw",
    margin: "auto",
    "z-index": 9998,
  });

  $(".cars-trip-accordion").css({
    background: "rgba(255, 255, 255, 0.2)",
    "backdrop-filter": "blur(10px)",
    "-webkit-backdrop-filter": "blur(10px)",
    "border-radius": "10px",
    border: "1px solid rgba(255, 255, 255, 0.3)",
    padding: "20px",
    width: "100%",
    "box-shadow": "0 4px 10px rgba(0, 0, 0, 0.1)",
  });



  drawSetSummary();
  updateSetIndicator();
}

												// ============================ Конец функции Ut ========================== //



    function se(t) {
      let e = t.find(".car .car-cooldown").attr("timer");
      return e ? parseInt(e, 10) : -1;
    }
    function on(t) {
      return (
        Array.isArray(t) || (t = t.toArray()),
        t.sort((e, n) => se($(n)) - se($(e)))
      );
    }
    function rn(t) {
      let e = [],
        n = [],
        o = [],
        r = [];
      return (
        t.each((a, s) => {
          let c = $(s),
            l = +c.attr("data-direction-id");
          Y.includes(l)
            ? (c.css("background", "#b9dfc7"), e.push(s))
            : H.includes(l)
              ? (c.css("background", "#aad7f8"), n.push(s))
              : qt.includes(l)
                ? (c.css("background", "#b9060e"), r.push(s))
                : (c.css("background", "#f8d7aa"), o.push(s));
          function p(d, g) {
            let u = g.indexOf(d);
            return u === -1 ? 1 / 0 : u;
          }
          return (
            e.sort((d, g) => {
              let u = +$(d).attr("data-direction-id"),
                w = +$(g).attr("data-direction-id");
              return p(u, Y) - p(w, Y);
            }),
            n.sort((d, g) => {
              let u = +$(d).attr("data-direction-id"),
                w = +$(g).attr("data-direction-id");
              return p(u, H) - p(w, H);
            }),
            [...e, ...n, ...o]
          );
        }),
        { exceptionCars: e, planesAndBoats: n, rest: o, bannedCars: r }
      );
    }
    async function Bt() {
      await j(),
        AngryAjax.goToUrl("/alley/"),
        $(document).one("ajaxStop", async () => {
          function t() {
            let n = $(
              '.alley-sovet h3:contains("\u041F\u0440\u043E\u0442\u0438\u0432\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u0435")'
            )
              .parent()
              .find("span.f")
              .attr("onclick");
            if (!n) return null;
            let o = n.match(/'([^']+)'(?:\s*\))/);
            return o ? o[1] : null;
          }
          let e = t();
          await fetch("https://www.moswar.ru/sovet/join_metro_fight/", {
            headers: {
              accept: "*/*",
              "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
              "content-type":
                "application/x-www-form-urlencoded; charset=UTF-8",
              "sec-fetch-mode": "cors",
              "sec-fetch-site": "same-origin",
              "x-requested-with": "XMLHttpRequest",
            },
            body: `action=join_metro_fight&metro=2&type=metro&joinkey=${e}&__referrer=%2Falley%2F&return_url=%2Falley%2F`,
            method: "POST",
            mode: "cors",
          }),
            AngryAjax.goToUrl("/sovet/map/"),
            Groups.showCreateGroup("sovet");
        });
    }
